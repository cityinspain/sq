"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""All input for the create `LahmanBatting` mutation."""
input CreateLahmanBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanBatting` to be created by this mutation."""
  lahmanBatting: LahmanBattingInput!
}

"""The output of our create `LahmanBatting` mutation."""
type CreateLahmanBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBatting` that was created by this mutation."""
  lahmanBatting: LahmanBatting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanBatting`. May be used by Relay 1."""
  lahmanBattingEdge(
    """The method to use when ordering `LahmanBatting`."""
    orderBy: [LahmanBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingsEdge
}

"""All input for the create `LahmanBattingpost` mutation."""
input CreateLahmanBattingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanBattingpost` to be created by this mutation."""
  lahmanBattingpost: LahmanBattingpostInput!
}

"""The output of our create `LahmanBattingpost` mutation."""
type CreateLahmanBattingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBattingpost` that was created by this mutation."""
  lahmanBattingpost: LahmanBattingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanBattingpost`. May be used by Relay 1."""
  lahmanBattingpostEdge(
    """The method to use when ordering `LahmanBattingpost`."""
    orderBy: [LahmanBattingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingpostsEdge
}

"""All input for the create `LahmanFielding` mutation."""
input CreateLahmanFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanFielding` to be created by this mutation."""
  lahmanFielding: LahmanFieldingInput!
}

"""The output of our create `LahmanFielding` mutation."""
type CreateLahmanFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFielding` that was created by this mutation."""
  lahmanFielding: LahmanFielding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFielding`. May be used by Relay 1."""
  lahmanFieldingEdge(
    """The method to use when ordering `LahmanFielding`."""
    orderBy: [LahmanFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingsEdge
}

"""All input for the create `LahmanFieldingpost` mutation."""
input CreateLahmanFieldingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanFieldingpost` to be created by this mutation."""
  lahmanFieldingpost: LahmanFieldingpostInput!
}

"""The output of our create `LahmanFieldingpost` mutation."""
type CreateLahmanFieldingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFieldingpost` that was created by this mutation."""
  lahmanFieldingpost: LahmanFieldingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFieldingpost`. May be used by Relay 1."""
  lahmanFieldingpostEdge(
    """The method to use when ordering `LahmanFieldingpost`."""
    orderBy: [LahmanFieldingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingpostsEdge
}

"""All input for the create `LahmanPark` mutation."""
input CreateLahmanParkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanPark` to be created by this mutation."""
  lahmanPark: LahmanParkInput!
}

"""The output of our create `LahmanPark` mutation."""
type CreateLahmanParkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPark` that was created by this mutation."""
  lahmanPark: LahmanPark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPark`. May be used by Relay 1."""
  lahmanParkEdge(
    """The method to use when ordering `LahmanPark`."""
    orderBy: [LahmanParksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanParksEdge
}

"""All input for the create `LahmanPerson` mutation."""
input CreateLahmanPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanPerson` to be created by this mutation."""
  lahmanPerson: LahmanPersonInput!
}

"""The output of our create `LahmanPerson` mutation."""
type CreateLahmanPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPerson` that was created by this mutation."""
  lahmanPerson: LahmanPerson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPerson`. May be used by Relay 1."""
  lahmanPersonEdge(
    """The method to use when ordering `LahmanPerson`."""
    orderBy: [LahmanPeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPeopleEdge
}

"""All input for the create `LahmanPitching` mutation."""
input CreateLahmanPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanPitching` to be created by this mutation."""
  lahmanPitching: LahmanPitchingInput!
}

"""The output of our create `LahmanPitching` mutation."""
type CreateLahmanPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitching` that was created by this mutation."""
  lahmanPitching: LahmanPitching

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitching`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitching`. May be used by Relay 1."""
  lahmanPitchingEdge(
    """The method to use when ordering `LahmanPitching`."""
    orderBy: [LahmanPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingsEdge
}

"""All input for the create `LahmanPitchingpost` mutation."""
input CreateLahmanPitchingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanPitchingpost` to be created by this mutation."""
  lahmanPitchingpost: LahmanPitchingpostInput!
}

"""The output of our create `LahmanPitchingpost` mutation."""
type CreateLahmanPitchingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitchingpost` that was created by this mutation."""
  lahmanPitchingpost: LahmanPitchingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitchingpost`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitchingpost`. May be used by Relay 1."""
  lahmanPitchingpostEdge(
    """The method to use when ordering `LahmanPitchingpost`."""
    orderBy: [LahmanPitchingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingpostsEdge
}

"""All input for the create `LahmanSalary` mutation."""
input CreateLahmanSalaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanSalary` to be created by this mutation."""
  lahmanSalary: LahmanSalaryInput!
}

"""The output of our create `LahmanSalary` mutation."""
type CreateLahmanSalaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanSalary` that was created by this mutation."""
  lahmanSalary: LahmanSalary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanSalary`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanSalary`. May be used by Relay 1."""
  lahmanSalaryEdge(
    """The method to use when ordering `LahmanSalary`."""
    orderBy: [LahmanSalariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanSalariesEdge
}

"""All input for the create `LahmanTeam` mutation."""
input CreateLahmanTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LahmanTeam` to be created by this mutation."""
  lahmanTeam: LahmanTeamInput!
}

"""The output of our create `LahmanTeam` mutation."""
type CreateLahmanTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanTeam` that was created by this mutation."""
  lahmanTeam: LahmanTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanTeam`. May be used by Relay 1."""
  lahmanTeamEdge(
    """The method to use when ordering `LahmanTeam`."""
    orderBy: [LahmanTeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanTeamsEdge
}

"""All input for the create `RetroBatting` mutation."""
input CreateRetroBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroBatting` to be created by this mutation."""
  retroBatting: RetroBattingInput!
}

"""The output of our create `RetroBatting` mutation."""
type CreateRetroBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroBatting` that was created by this mutation."""
  retroBatting: RetroBatting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroBatting`. May be used by Relay 1."""
  retroBattingEdge(
    """The method to use when ordering `RetroBatting`."""
    orderBy: [RetroBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroBattingsEdge
}

"""All input for the create `RetroEvent` mutation."""
input CreateRetroEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroEvent` to be created by this mutation."""
  retroEvent: RetroEventInput!
}

"""The output of our create `RetroEvent` mutation."""
type CreateRetroEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroEvent` that was created by this mutation."""
  retroEvent: RetroEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RetroGame` that is related to this `RetroEvent`."""
  retroGameByGameId: RetroGame

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByBatId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByPitId: LahmanPerson

  """An edge for our `RetroEvent`. May be used by Relay 1."""
  retroEventEdge(
    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroEventsEdge
}

"""All input for the create `RetroFielding` mutation."""
input CreateRetroFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroFielding` to be created by this mutation."""
  retroFielding: RetroFieldingInput!
}

"""The output of our create `RetroFielding` mutation."""
type CreateRetroFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroFielding` that was created by this mutation."""
  retroFielding: RetroFielding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroFielding`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroFielding`. May be used by Relay 1."""
  retroFieldingEdge(
    """The method to use when ordering `RetroFielding`."""
    orderBy: [RetroFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroFieldingsEdge
}

"""All input for the create `RetroGame` mutation."""
input CreateRetroGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroGame` to be created by this mutation."""
  retroGame: RetroGameInput!
}

"""The output of our create `RetroGame` mutation."""
type CreateRetroGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroGame` that was created by this mutation."""
  retroGame: RetroGame

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByWinPitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByLosePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonBySavePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByGwrbiBatId: LahmanPerson

  """An edge for our `RetroGame`. May be used by Relay 1."""
  retroGameEdge(
    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroGamesEdge
}

"""All input for the create `RetroPitching` mutation."""
input CreateRetroPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroPitching` to be created by this mutation."""
  retroPitching: RetroPitchingInput!
}

"""The output of our create `RetroPitching` mutation."""
type CreateRetroPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroPitching` that was created by this mutation."""
  retroPitching: RetroPitching

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroPitching`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroPitching`. May be used by Relay 1."""
  retroPitchingEdge(
    """The method to use when ordering `RetroPitching`."""
    orderBy: [RetroPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroPitchingsEdge
}

"""All input for the create `RetroTeamGame` mutation."""
input CreateRetroTeamGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RetroTeamGame` to be created by this mutation."""
  retroTeamGame: RetroTeamGameInput!
}

"""The output of our create `RetroTeamGame` mutation."""
type CreateRetroTeamGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroTeamGame` that was created by this mutation."""
  retroTeamGame: RetroTeamGame

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanTeam` that is related to this `RetroTeamGame`."""
  lahmanTeamByTeamIdAndYear: LahmanTeam

  """An edge for our `RetroTeamGame`. May be used by Relay 1."""
  retroTeamGameEdge(
    """The method to use when ordering `RetroTeamGame`."""
    orderBy: [RetroTeamGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroTeamGamesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
All input for the `deleteLahmanBattingByPlayerIdAndYearAndStint` mutation.
"""
input DeleteLahmanBattingByPlayerIdAndYearAndStintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  stint: Int!
}

"""All input for the `deleteLahmanBatting` mutation."""
input DeleteLahmanBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanBatting` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanBatting` mutation."""
type DeleteLahmanBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBatting` that was deleted by this mutation."""
  lahmanBatting: LahmanBatting
  deletedLahmanBattingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanBatting`. May be used by Relay 1."""
  lahmanBattingEdge(
    """The method to use when ordering `LahmanBatting`."""
    orderBy: [LahmanBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingsEdge
}

"""
All input for the `deleteLahmanBattingpostByPlayerIdAndYearAndRound` mutation.
"""
input DeleteLahmanBattingpostByPlayerIdAndYearAndRoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  round: String!
}

"""All input for the `deleteLahmanBattingpost` mutation."""
input DeleteLahmanBattingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanBattingpost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanBattingpost` mutation."""
type DeleteLahmanBattingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBattingpost` that was deleted by this mutation."""
  lahmanBattingpost: LahmanBattingpost
  deletedLahmanBattingpostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanBattingpost`. May be used by Relay 1."""
  lahmanBattingpostEdge(
    """The method to use when ordering `LahmanBattingpost`."""
    orderBy: [LahmanBattingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingpostsEdge
}

"""
All input for the `deleteLahmanFieldingByPlayerIdAndYearAndStintAndPos` mutation.
"""
input DeleteLahmanFieldingByPlayerIdAndYearAndStintAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  stint: Int!
  pos: String!
}

"""All input for the `deleteLahmanFielding` mutation."""
input DeleteLahmanFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanFielding` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanFielding` mutation."""
type DeleteLahmanFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFielding` that was deleted by this mutation."""
  lahmanFielding: LahmanFielding
  deletedLahmanFieldingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFielding`. May be used by Relay 1."""
  lahmanFieldingEdge(
    """The method to use when ordering `LahmanFielding`."""
    orderBy: [LahmanFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingsEdge
}

"""
All input for the `deleteLahmanFieldingpostByPlayerIdAndYearAndRoundAndPos` mutation.
"""
input DeleteLahmanFieldingpostByPlayerIdAndYearAndRoundAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  round: String!
  pos: String!
}

"""All input for the `deleteLahmanFieldingpost` mutation."""
input DeleteLahmanFieldingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanFieldingpost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanFieldingpost` mutation."""
type DeleteLahmanFieldingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFieldingpost` that was deleted by this mutation."""
  lahmanFieldingpost: LahmanFieldingpost
  deletedLahmanFieldingpostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFieldingpost`. May be used by Relay 1."""
  lahmanFieldingpostEdge(
    """The method to use when ordering `LahmanFieldingpost`."""
    orderBy: [LahmanFieldingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingpostsEdge
}

"""All input for the `deleteLahmanParkByParkKey` mutation."""
input DeleteLahmanParkByParkKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parkKey: String!
}

"""All input for the `deleteLahmanPark` mutation."""
input DeleteLahmanParkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPark` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanPark` mutation."""
type DeleteLahmanParkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPark` that was deleted by this mutation."""
  lahmanPark: LahmanPark
  deletedLahmanParkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPark`. May be used by Relay 1."""
  lahmanParkEdge(
    """The method to use when ordering `LahmanPark`."""
    orderBy: [LahmanParksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanParksEdge
}

"""All input for the `deleteLahmanPersonByPlayerId` mutation."""
input DeleteLahmanPersonByPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
}

"""All input for the `deleteLahmanPersonByRetroId` mutation."""
input DeleteLahmanPersonByRetroIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  retroId: String!
}

"""All input for the `deleteLahmanPerson` mutation."""
input DeleteLahmanPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPerson` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanPerson` mutation."""
type DeleteLahmanPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPerson` that was deleted by this mutation."""
  lahmanPerson: LahmanPerson
  deletedLahmanPersonId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPerson`. May be used by Relay 1."""
  lahmanPersonEdge(
    """The method to use when ordering `LahmanPerson`."""
    orderBy: [LahmanPeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPeopleEdge
}

"""
All input for the `deleteLahmanPitchingByPlayerIdAndYearAndStint` mutation.
"""
input DeleteLahmanPitchingByPlayerIdAndYearAndStintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  stint: Int!
}

"""All input for the `deleteLahmanPitching` mutation."""
input DeleteLahmanPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPitching` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanPitching` mutation."""
type DeleteLahmanPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitching` that was deleted by this mutation."""
  lahmanPitching: LahmanPitching
  deletedLahmanPitchingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitching`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitching`. May be used by Relay 1."""
  lahmanPitchingEdge(
    """The method to use when ordering `LahmanPitching`."""
    orderBy: [LahmanPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingsEdge
}

"""
All input for the `deleteLahmanPitchingpostByPlayerIdAndYearAndRound` mutation.
"""
input DeleteLahmanPitchingpostByPlayerIdAndYearAndRoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  round: String!
}

"""All input for the `deleteLahmanPitchingpost` mutation."""
input DeleteLahmanPitchingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPitchingpost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanPitchingpost` mutation."""
type DeleteLahmanPitchingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitchingpost` that was deleted by this mutation."""
  lahmanPitchingpost: LahmanPitchingpost
  deletedLahmanPitchingpostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitchingpost`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitchingpost`. May be used by Relay 1."""
  lahmanPitchingpostEdge(
    """The method to use when ordering `LahmanPitchingpost`."""
    orderBy: [LahmanPitchingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingpostsEdge
}

"""
All input for the `deleteLahmanSalaryByPlayerIdAndYearAndTeamId` mutation.
"""
input DeleteLahmanSalaryByPlayerIdAndYearAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  year: Int!
  teamId: String!
}

"""All input for the `deleteLahmanSalary` mutation."""
input DeleteLahmanSalaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanSalary` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanSalary` mutation."""
type DeleteLahmanSalaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanSalary` that was deleted by this mutation."""
  lahmanSalary: LahmanSalary
  deletedLahmanSalaryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanSalary`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanSalary`. May be used by Relay 1."""
  lahmanSalaryEdge(
    """The method to use when ordering `LahmanSalary`."""
    orderBy: [LahmanSalariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanSalariesEdge
}

"""All input for the `deleteLahmanTeamByTeamIdAndYear` mutation."""
input DeleteLahmanTeamByTeamIdAndYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamId: String!
  year: Int!
}

"""All input for the `deleteLahmanTeamByTeamIdRetroAndYear` mutation."""
input DeleteLahmanTeamByTeamIdRetroAndYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamIdRetro: String!
  year: Int!
}

"""All input for the `deleteLahmanTeam` mutation."""
input DeleteLahmanTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanTeam` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LahmanTeam` mutation."""
type DeleteLahmanTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanTeam` that was deleted by this mutation."""
  lahmanTeam: LahmanTeam
  deletedLahmanTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanTeam`. May be used by Relay 1."""
  lahmanTeamEdge(
    """The method to use when ordering `LahmanTeam`."""
    orderBy: [LahmanTeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanTeamsEdge
}

"""All input for the `deleteRetroBattingByPlayerIdAndGameId` mutation."""
input DeleteRetroBattingByPlayerIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  gameId: String!
}

"""All input for the `deleteRetroBatting` mutation."""
input DeleteRetroBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroBatting` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroBatting` mutation."""
type DeleteRetroBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroBatting` that was deleted by this mutation."""
  retroBatting: RetroBatting
  deletedRetroBattingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroBatting`. May be used by Relay 1."""
  retroBattingEdge(
    """The method to use when ordering `RetroBatting`."""
    orderBy: [RetroBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroBattingsEdge
}

"""All input for the `deleteRetroEventByGameIdAndEventId` mutation."""
input DeleteRetroEventByGameIdAndEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: String!
  eventId: Int!
}

"""All input for the `deleteRetroEvent` mutation."""
input DeleteRetroEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroEvent` mutation."""
type DeleteRetroEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroEvent` that was deleted by this mutation."""
  retroEvent: RetroEvent
  deletedRetroEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RetroGame` that is related to this `RetroEvent`."""
  retroGameByGameId: RetroGame

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByBatId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByPitId: LahmanPerson

  """An edge for our `RetroEvent`. May be used by Relay 1."""
  retroEventEdge(
    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroEventsEdge
}

"""
All input for the `deleteRetroFieldingByPlayerIdAndGameIdAndPos` mutation.
"""
input DeleteRetroFieldingByPlayerIdAndGameIdAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  gameId: String!
  pos: String!
}

"""All input for the `deleteRetroFielding` mutation."""
input DeleteRetroFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroFielding` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroFielding` mutation."""
type DeleteRetroFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroFielding` that was deleted by this mutation."""
  retroFielding: RetroFielding
  deletedRetroFieldingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroFielding`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroFielding`. May be used by Relay 1."""
  retroFieldingEdge(
    """The method to use when ordering `RetroFielding`."""
    orderBy: [RetroFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroFieldingsEdge
}

"""All input for the `deleteRetroGameByGameId` mutation."""
input DeleteRetroGameByGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: String!
}

"""All input for the `deleteRetroGame` mutation."""
input DeleteRetroGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroGame` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroGame` mutation."""
type DeleteRetroGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroGame` that was deleted by this mutation."""
  retroGame: RetroGame
  deletedRetroGameId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByWinPitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByLosePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonBySavePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByGwrbiBatId: LahmanPerson

  """An edge for our `RetroGame`. May be used by Relay 1."""
  retroGameEdge(
    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroGamesEdge
}

"""All input for the `deleteRetroPitchingByPlayerIdAndGameId` mutation."""
input DeleteRetroPitchingByPlayerIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
  gameId: String!
}

"""All input for the `deleteRetroPitching` mutation."""
input DeleteRetroPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroPitching` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroPitching` mutation."""
type DeleteRetroPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroPitching` that was deleted by this mutation."""
  retroPitching: RetroPitching
  deletedRetroPitchingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroPitching`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroPitching`. May be used by Relay 1."""
  retroPitchingEdge(
    """The method to use when ordering `RetroPitching`."""
    orderBy: [RetroPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroPitchingsEdge
}

"""All input for the `deleteRetroTeamGameByTeamIdAndGameId` mutation."""
input DeleteRetroTeamGameByTeamIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamId: String!
  gameId: String!
}

"""All input for the `deleteRetroTeamGame` mutation."""
input DeleteRetroTeamGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroTeamGame` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RetroTeamGame` mutation."""
type DeleteRetroTeamGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroTeamGame` that was deleted by this mutation."""
  retroTeamGame: RetroTeamGame
  deletedRetroTeamGameId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanTeam` that is related to this `RetroTeamGame`."""
  lahmanTeamByTeamIdAndYear: LahmanTeam

  """An edge for our `RetroTeamGame`. May be used by Relay 1."""
  retroTeamGameEdge(
    """The method to use when ordering `RetroTeamGame`."""
    orderBy: [RetroTeamGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroTeamGamesEdge
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

type LahmanBatting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int

  """Reads a single `LahmanPerson` that is related to this `LahmanBatting`."""
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `LahmanBatting` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanBattingCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `stint` field."""
  stint: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `ba` field."""
  ba: Float

  """Checks for equality with the object’s `obp` field."""
  obp: Float

  """Checks for equality with the object’s `slg` field."""
  slg: Float

  """Checks for equality with the object’s `ops` field."""
  ops: Float

  """Checks for equality with the object’s `pa` field."""
  pa: Int
}

"""
A filter to be used against `LahmanBatting` object types. All fields are combined with a logical ‘and.’
"""
input LahmanBattingFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `stint` field."""
  stint: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `ba` field."""
  ba: FloatFilter

  """Filter by the object’s `obp` field."""
  obp: FloatFilter

  """Filter by the object’s `slg` field."""
  slg: FloatFilter

  """Filter by the object’s `ops` field."""
  ops: FloatFilter

  """Filter by the object’s `pa` field."""
  pa: IntFilter

  """Checks for all expressions in this list."""
  and: [LahmanBattingFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanBattingFilter!]

  """Negates the expression."""
  not: LahmanBattingFilter
}

"""An input for mutations affecting `LahmanBatting`"""
input LahmanBattingInput {
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int
}

"""
Represents an update to a `LahmanBatting`. Fields that are set will be updated.
"""
input LahmanBattingPatch {
  playerId: String
  year: Int
  stint: Int
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int
}

type LahmanBattingpost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  year: Int!
  round: String!
  playerId: String!
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int
}

"""
A condition to be used against `LahmanBattingpost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanBattingpostCondition {
  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `round` field."""
  round: String

  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `ba` field."""
  ba: Float

  """Checks for equality with the object’s `obp` field."""
  obp: Float

  """Checks for equality with the object’s `slg` field."""
  slg: Float

  """Checks for equality with the object’s `ops` field."""
  ops: Float

  """Checks for equality with the object’s `pa` field."""
  pa: Int
}

"""
A filter to be used against `LahmanBattingpost` object types. All fields are combined with a logical ‘and.’
"""
input LahmanBattingpostFilter {
  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `round` field."""
  round: StringFilter

  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `ba` field."""
  ba: FloatFilter

  """Filter by the object’s `obp` field."""
  obp: FloatFilter

  """Filter by the object’s `slg` field."""
  slg: FloatFilter

  """Filter by the object’s `ops` field."""
  ops: FloatFilter

  """Filter by the object’s `pa` field."""
  pa: IntFilter

  """Checks for all expressions in this list."""
  and: [LahmanBattingpostFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanBattingpostFilter!]

  """Negates the expression."""
  not: LahmanBattingpostFilter
}

"""An input for mutations affecting `LahmanBattingpost`"""
input LahmanBattingpostInput {
  year: Int!
  round: String!
  playerId: String!
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int
}

"""
Represents an update to a `LahmanBattingpost`. Fields that are set will be updated.
"""
input LahmanBattingpostPatch {
  year: Int
  round: String
  playerId: String
  teamId: String
  lgId: String
  g: Int
  ab: Int
  r: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sb: Int
  cs: Int
  bb: Int
  so: Int
  ibb: Int
  hbp: Int
  sh: Int
  sf: Int
  gidp: Int
  ba: Float
  obp: Float
  slg: Float
  ops: Float
  pa: Int
}

"""A connection to a list of `LahmanBattingpost` values."""
type LahmanBattingpostsConnection {
  """A list of `LahmanBattingpost` objects."""
  nodes: [LahmanBattingpost]!

  """
  A list of edges which contains the `LahmanBattingpost` and cursor to aid in pagination.
  """
  edges: [LahmanBattingpostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LahmanBattingpost` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LahmanBattingpost` edge in the connection."""
type LahmanBattingpostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanBattingpost` at the end of the edge."""
  node: LahmanBattingpost
}

"""Methods to use when ordering `LahmanBattingpost`."""
enum LahmanBattingpostsOrderBy {
  NATURAL
  YEAR_ASC
  YEAR_DESC
  ROUND_ASC
  ROUND_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  G_ASC
  G_DESC
  AB_ASC
  AB_DESC
  R_ASC
  R_DESC
  H_ASC
  H_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  RBI_ASC
  RBI_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  BB_ASC
  BB_DESC
  SO_ASC
  SO_DESC
  IBB_ASC
  IBB_DESC
  HBP_ASC
  HBP_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  GIDP_ASC
  GIDP_DESC
  BA_ASC
  BA_DESC
  OBP_ASC
  OBP_DESC
  SLG_ASC
  SLG_DESC
  OPS_ASC
  OPS_DESC
  PA_ASC
  PA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `LahmanBatting` values."""
type LahmanBattingsConnection {
  """A list of `LahmanBatting` objects."""
  nodes: [LahmanBatting]!

  """
  A list of edges which contains the `LahmanBatting` and cursor to aid in pagination.
  """
  edges: [LahmanBattingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanBatting` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanBatting` edge in the connection."""
type LahmanBattingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanBatting` at the end of the edge."""
  node: LahmanBatting
}

"""Methods to use when ordering `LahmanBatting`."""
enum LahmanBattingsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  STINT_ASC
  STINT_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  G_ASC
  G_DESC
  AB_ASC
  AB_DESC
  R_ASC
  R_DESC
  H_ASC
  H_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  RBI_ASC
  RBI_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  BB_ASC
  BB_DESC
  SO_ASC
  SO_DESC
  IBB_ASC
  IBB_DESC
  HBP_ASC
  HBP_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  GIDP_ASC
  GIDP_DESC
  BA_ASC
  BA_DESC
  OBP_ASC
  OBP_DESC
  SLG_ASC
  SLG_DESC
  OPS_ASC
  OPS_DESC
  PA_ASC
  PA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LahmanFielding implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  pos: String!
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
}

"""
A condition to be used against `LahmanFielding` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanFieldingCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `stint` field."""
  stint: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `pos` field."""
  pos: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `innOuts` field."""
  innOuts: Int

  """Checks for equality with the object’s `po` field."""
  po: Int

  """Checks for equality with the object’s `a` field."""
  a: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `dp` field."""
  dp: Int
}

"""
A filter to be used against `LahmanFielding` object types. All fields are combined with a logical ‘and.’
"""
input LahmanFieldingFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `stint` field."""
  stint: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `pos` field."""
  pos: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `innOuts` field."""
  innOuts: IntFilter

  """Filter by the object’s `po` field."""
  po: IntFilter

  """Filter by the object’s `a` field."""
  a: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `dp` field."""
  dp: IntFilter

  """Checks for all expressions in this list."""
  and: [LahmanFieldingFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanFieldingFilter!]

  """Negates the expression."""
  not: LahmanFieldingFilter
}

"""An input for mutations affecting `LahmanFielding`"""
input LahmanFieldingInput {
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  pos: String!
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
}

"""
Represents an update to a `LahmanFielding`. Fields that are set will be updated.
"""
input LahmanFieldingPatch {
  playerId: String
  year: Int
  stint: Int
  teamId: String
  lgId: String
  pos: String
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
}

type LahmanFieldingpost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  year: Int!
  teamId: String
  lgId: String
  round: String!
  pos: String!
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  sb: Float
  cs: Float
}

"""
A condition to be used against `LahmanFieldingpost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanFieldingpostCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `round` field."""
  round: String

  """Checks for equality with the object’s `pos` field."""
  pos: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `innOuts` field."""
  innOuts: Int

  """Checks for equality with the object’s `po` field."""
  po: Int

  """Checks for equality with the object’s `a` field."""
  a: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `dp` field."""
  dp: Int

  """Checks for equality with the object’s `tp` field."""
  tp: Int

  """Checks for equality with the object’s `pb` field."""
  pb: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Float

  """Checks for equality with the object’s `cs` field."""
  cs: Float
}

"""
A filter to be used against `LahmanFieldingpost` object types. All fields are combined with a logical ‘and.’
"""
input LahmanFieldingpostFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `round` field."""
  round: StringFilter

  """Filter by the object’s `pos` field."""
  pos: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `innOuts` field."""
  innOuts: IntFilter

  """Filter by the object’s `po` field."""
  po: IntFilter

  """Filter by the object’s `a` field."""
  a: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `dp` field."""
  dp: IntFilter

  """Filter by the object’s `tp` field."""
  tp: IntFilter

  """Filter by the object’s `pb` field."""
  pb: IntFilter

  """Filter by the object’s `sb` field."""
  sb: FloatFilter

  """Filter by the object’s `cs` field."""
  cs: FloatFilter

  """Checks for all expressions in this list."""
  and: [LahmanFieldingpostFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanFieldingpostFilter!]

  """Negates the expression."""
  not: LahmanFieldingpostFilter
}

"""An input for mutations affecting `LahmanFieldingpost`"""
input LahmanFieldingpostInput {
  playerId: String!
  year: Int!
  teamId: String
  lgId: String
  round: String!
  pos: String!
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  sb: Float
  cs: Float
}

"""
Represents an update to a `LahmanFieldingpost`. Fields that are set will be updated.
"""
input LahmanFieldingpostPatch {
  playerId: String
  year: Int
  teamId: String
  lgId: String
  round: String
  pos: String
  g: Int
  gs: Int
  innOuts: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  sb: Float
  cs: Float
}

"""A connection to a list of `LahmanFieldingpost` values."""
type LahmanFieldingpostsConnection {
  """A list of `LahmanFieldingpost` objects."""
  nodes: [LahmanFieldingpost]!

  """
  A list of edges which contains the `LahmanFieldingpost` and cursor to aid in pagination.
  """
  edges: [LahmanFieldingpostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LahmanFieldingpost` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LahmanFieldingpost` edge in the connection."""
type LahmanFieldingpostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanFieldingpost` at the end of the edge."""
  node: LahmanFieldingpost
}

"""Methods to use when ordering `LahmanFieldingpost`."""
enum LahmanFieldingpostsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  ROUND_ASC
  ROUND_DESC
  POS_ASC
  POS_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  INN_OUTS_ASC
  INN_OUTS_DESC
  PO_ASC
  PO_DESC
  A_ASC
  A_DESC
  E_ASC
  E_DESC
  DP_ASC
  DP_DESC
  TP_ASC
  TP_DESC
  PB_ASC
  PB_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `LahmanFielding` values."""
type LahmanFieldingsConnection {
  """A list of `LahmanFielding` objects."""
  nodes: [LahmanFielding]!

  """
  A list of edges which contains the `LahmanFielding` and cursor to aid in pagination.
  """
  edges: [LahmanFieldingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanFielding` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanFielding` edge in the connection."""
type LahmanFieldingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanFielding` at the end of the edge."""
  node: LahmanFielding
}

"""Methods to use when ordering `LahmanFielding`."""
enum LahmanFieldingsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  STINT_ASC
  STINT_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  POS_ASC
  POS_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  INN_OUTS_ASC
  INN_OUTS_DESC
  PO_ASC
  PO_DESC
  A_ASC
  A_DESC
  E_ASC
  E_DESC
  DP_ASC
  DP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LahmanPark implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  parkKey: String!
  parkName: String
  parkAlias: String
  city: String
  state: String
  country: String
}

"""
A condition to be used against `LahmanPark` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LahmanParkCondition {
  """Checks for equality with the object’s `parkKey` field."""
  parkKey: String

  """Checks for equality with the object’s `parkName` field."""
  parkName: String

  """Checks for equality with the object’s `parkAlias` field."""
  parkAlias: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `country` field."""
  country: String
}

"""
A filter to be used against `LahmanPark` object types. All fields are combined with a logical ‘and.’
"""
input LahmanParkFilter {
  """Filter by the object’s `parkKey` field."""
  parkKey: StringFilter

  """Filter by the object’s `parkName` field."""
  parkName: StringFilter

  """Filter by the object’s `parkAlias` field."""
  parkAlias: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Checks for all expressions in this list."""
  and: [LahmanParkFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanParkFilter!]

  """Negates the expression."""
  not: LahmanParkFilter
}

"""An input for mutations affecting `LahmanPark`"""
input LahmanParkInput {
  parkKey: String!
  parkName: String
  parkAlias: String
  city: String
  state: String
  country: String
}

"""
Represents an update to a `LahmanPark`. Fields that are set will be updated.
"""
input LahmanParkPatch {
  parkKey: String
  parkName: String
  parkAlias: String
  city: String
  state: String
  country: String
}

"""A connection to a list of `LahmanPark` values."""
type LahmanParksConnection {
  """A list of `LahmanPark` objects."""
  nodes: [LahmanPark]!

  """
  A list of edges which contains the `LahmanPark` and cursor to aid in pagination.
  """
  edges: [LahmanParksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanPark` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanPark` edge in the connection."""
type LahmanParksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanPark` at the end of the edge."""
  node: LahmanPark
}

"""Methods to use when ordering `LahmanPark`."""
enum LahmanParksOrderBy {
  NATURAL
  PARK_KEY_ASC
  PARK_KEY_DESC
  PARK_NAME_ASC
  PARK_NAME_DESC
  PARK_ALIAS_ASC
  PARK_ALIAS_DESC
  CITY_ASC
  CITY_DESC
  STATE_ASC
  STATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `LahmanPerson` values."""
type LahmanPeopleConnection {
  """A list of `LahmanPerson` objects."""
  nodes: [LahmanPerson]!

  """
  A list of edges which contains the `LahmanPerson` and cursor to aid in pagination.
  """
  edges: [LahmanPeopleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanPerson` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanPerson` edge in the connection."""
type LahmanPeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanPerson` at the end of the edge."""
  node: LahmanPerson
}

"""Methods to use when ordering `LahmanPerson`."""
enum LahmanPeopleOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  BIRTH_COUNTRY_ASC
  BIRTH_COUNTRY_DESC
  BIRTH_STATE_ASC
  BIRTH_STATE_DESC
  BIRTH_CITY_ASC
  BIRTH_CITY_DESC
  DEATH_COUNTRY_ASC
  DEATH_COUNTRY_DESC
  DEATH_STATE_ASC
  DEATH_STATE_DESC
  DEATH_CITY_ASC
  DEATH_CITY_DESC
  NAME_FIRST_ASC
  NAME_FIRST_DESC
  NAME_LAST_ASC
  NAME_LAST_DESC
  NAME_GIVEN_ASC
  NAME_GIVEN_DESC
  WEIGHT_ASC
  WEIGHT_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  BATS_ASC
  BATS_DESC
  THROWS_ASC
  THROWS_DESC
  DEBUT_ASC
  DEBUT_DESC
  FINAL_GAME_ASC
  FINAL_GAME_DESC
  RETRO_ID_ASC
  RETRO_ID_DESC
  BB_REF_ID_ASC
  BB_REF_ID_DESC
  BIRTH_DATE_ASC
  BIRTH_DATE_DESC
  DEATH_DATE_ASC
  DEATH_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LahmanPerson implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  birthCountry: String
  birthState: String
  birthCity: String
  deathCountry: String
  deathState: String
  deathCity: String
  nameFirst: String
  nameLast: String
  nameGiven: String
  weight: Float
  height: Float
  bats: String
  throws: String
  debut: Datetime
  finalGame: Datetime
  retroId: String
  bbRefId: String
  birthDate: Datetime
  deathDate: Datetime

  """Reads and enables pagination through a set of `LahmanBatting`."""
  lahmanBattingsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanBatting`."""
    orderBy: [LahmanBattingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanBattingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanBattingFilter
  ): LahmanBattingsConnection!

  """Reads and enables pagination through a set of `LahmanPitching`."""
  lahmanPitchingsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPitching`."""
    orderBy: [LahmanPitchingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanPitchingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanPitchingFilter
  ): LahmanPitchingsConnection!

  """Reads and enables pagination through a set of `LahmanPitchingpost`."""
  lahmanPitchingpostsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPitchingpost`."""
    orderBy: [LahmanPitchingpostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanPitchingpostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanPitchingpostFilter
  ): LahmanPitchingpostsConnection!

  """Reads and enables pagination through a set of `LahmanSalary`."""
  lahmanSalariesByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanSalary`."""
    orderBy: [LahmanSalariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanSalaryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanSalaryFilter
  ): LahmanSalariesConnection!

  """Reads and enables pagination through a set of `RetroBatting`."""
  retroBattingsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroBatting`."""
    orderBy: [RetroBattingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroBattingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroBattingFilter
  ): RetroBattingsConnection!

  """Reads and enables pagination through a set of `RetroPitching`."""
  retroPitchingsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroPitching`."""
    orderBy: [RetroPitchingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroPitchingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroPitchingFilter
  ): RetroPitchingsConnection!

  """Reads and enables pagination through a set of `RetroFielding`."""
  retroFieldingsByPlayerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroFielding`."""
    orderBy: [RetroFieldingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroFieldingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroFieldingFilter
  ): RetroFieldingsConnection!

  """Reads and enables pagination through a set of `RetroGame`."""
  retroGamesByWinPitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroGameFilter
  ): RetroGamesConnection!

  """Reads and enables pagination through a set of `RetroGame`."""
  retroGamesByLosePitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroGameFilter
  ): RetroGamesConnection!

  """Reads and enables pagination through a set of `RetroGame`."""
  retroGamesBySavePitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroGameFilter
  ): RetroGamesConnection!

  """Reads and enables pagination through a set of `RetroGame`."""
  retroGamesByGwrbiBatId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroGameFilter
  ): RetroGamesConnection!

  """Reads and enables pagination through a set of `RetroEvent`."""
  retroEventsByBatId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroEventFilter
  ): RetroEventsConnection!

  """Reads and enables pagination through a set of `RetroEvent`."""
  retroEventsByPitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroEventFilter
  ): RetroEventsConnection!
}

"""
A condition to be used against `LahmanPerson` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanPersonCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `birthCountry` field."""
  birthCountry: String

  """Checks for equality with the object’s `birthState` field."""
  birthState: String

  """Checks for equality with the object’s `birthCity` field."""
  birthCity: String

  """Checks for equality with the object’s `deathCountry` field."""
  deathCountry: String

  """Checks for equality with the object’s `deathState` field."""
  deathState: String

  """Checks for equality with the object’s `deathCity` field."""
  deathCity: String

  """Checks for equality with the object’s `nameFirst` field."""
  nameFirst: String

  """Checks for equality with the object’s `nameLast` field."""
  nameLast: String

  """Checks for equality with the object’s `nameGiven` field."""
  nameGiven: String

  """Checks for equality with the object’s `weight` field."""
  weight: Float

  """Checks for equality with the object’s `height` field."""
  height: Float

  """Checks for equality with the object’s `bats` field."""
  bats: String

  """Checks for equality with the object’s `throws` field."""
  throws: String

  """Checks for equality with the object’s `debut` field."""
  debut: Datetime

  """Checks for equality with the object’s `finalGame` field."""
  finalGame: Datetime

  """Checks for equality with the object’s `retroId` field."""
  retroId: String

  """Checks for equality with the object’s `bbRefId` field."""
  bbRefId: String

  """Checks for equality with the object’s `birthDate` field."""
  birthDate: Datetime

  """Checks for equality with the object’s `deathDate` field."""
  deathDate: Datetime
}

"""
A filter to be used against `LahmanPerson` object types. All fields are combined with a logical ‘and.’
"""
input LahmanPersonFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `birthCountry` field."""
  birthCountry: StringFilter

  """Filter by the object’s `birthState` field."""
  birthState: StringFilter

  """Filter by the object’s `birthCity` field."""
  birthCity: StringFilter

  """Filter by the object’s `deathCountry` field."""
  deathCountry: StringFilter

  """Filter by the object’s `deathState` field."""
  deathState: StringFilter

  """Filter by the object’s `deathCity` field."""
  deathCity: StringFilter

  """Filter by the object’s `nameFirst` field."""
  nameFirst: StringFilter

  """Filter by the object’s `nameLast` field."""
  nameLast: StringFilter

  """Filter by the object’s `nameGiven` field."""
  nameGiven: StringFilter

  """Filter by the object’s `weight` field."""
  weight: FloatFilter

  """Filter by the object’s `height` field."""
  height: FloatFilter

  """Filter by the object’s `bats` field."""
  bats: StringFilter

  """Filter by the object’s `throws` field."""
  throws: StringFilter

  """Filter by the object’s `debut` field."""
  debut: DatetimeFilter

  """Filter by the object’s `finalGame` field."""
  finalGame: DatetimeFilter

  """Filter by the object’s `retroId` field."""
  retroId: StringFilter

  """Filter by the object’s `bbRefId` field."""
  bbRefId: StringFilter

  """Filter by the object’s `birthDate` field."""
  birthDate: DatetimeFilter

  """Filter by the object’s `deathDate` field."""
  deathDate: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [LahmanPersonFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanPersonFilter!]

  """Negates the expression."""
  not: LahmanPersonFilter
}

"""An input for mutations affecting `LahmanPerson`"""
input LahmanPersonInput {
  playerId: String!
  birthCountry: String
  birthState: String
  birthCity: String
  deathCountry: String
  deathState: String
  deathCity: String
  nameFirst: String
  nameLast: String
  nameGiven: String
  weight: Float
  height: Float
  bats: String
  throws: String
  debut: Datetime
  finalGame: Datetime
  retroId: String
  bbRefId: String
  birthDate: Datetime
  deathDate: Datetime
}

"""
Represents an update to a `LahmanPerson`. Fields that are set will be updated.
"""
input LahmanPersonPatch {
  playerId: String
  birthCountry: String
  birthState: String
  birthCity: String
  deathCountry: String
  deathState: String
  deathCity: String
  nameFirst: String
  nameLast: String
  nameGiven: String
  weight: Float
  height: Float
  bats: String
  throws: String
  debut: Datetime
  finalGame: Datetime
  retroId: String
  bbRefId: String
  birthDate: Datetime
  deathDate: Datetime
}

type LahmanPitching implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitching`.
  """
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `LahmanPitching` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanPitchingCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `stint` field."""
  stint: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `w` field."""
  w: Int

  """Checks for equality with the object’s `l` field."""
  l: Int

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `cg` field."""
  cg: Int

  """Checks for equality with the object’s `sho` field."""
  sho: Int

  """Checks for equality with the object’s `sv` field."""
  sv: Int

  """Checks for equality with the object’s `ipOuts` field."""
  ipOuts: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `er` field."""
  er: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `baOpp` field."""
  baOpp: Float

  """Checks for equality with the object’s `era` field."""
  era: Float

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `wp` field."""
  wp: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `bk` field."""
  bk: Int

  """Checks for equality with the object’s `bfp` field."""
  bfp: Int

  """Checks for equality with the object’s `gf` field."""
  gf: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `whip` field."""
  whip: Float

  """Checks for equality with the object’s `h9` field."""
  h9: Float

  """Checks for equality with the object’s `hr9` field."""
  hr9: Float

  """Checks for equality with the object’s `k9` field."""
  k9: Float

  """Checks for equality with the object’s `bb9` field."""
  bb9: Float

  """Checks for equality with the object’s `sow` field."""
  sow: Float
}

"""
A filter to be used against `LahmanPitching` object types. All fields are combined with a logical ‘and.’
"""
input LahmanPitchingFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `stint` field."""
  stint: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `w` field."""
  w: IntFilter

  """Filter by the object’s `l` field."""
  l: IntFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `cg` field."""
  cg: IntFilter

  """Filter by the object’s `sho` field."""
  sho: IntFilter

  """Filter by the object’s `sv` field."""
  sv: IntFilter

  """Filter by the object’s `ipOuts` field."""
  ipOuts: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `er` field."""
  er: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `baOpp` field."""
  baOpp: FloatFilter

  """Filter by the object’s `era` field."""
  era: FloatFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `wp` field."""
  wp: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `bk` field."""
  bk: IntFilter

  """Filter by the object’s `bfp` field."""
  bfp: IntFilter

  """Filter by the object’s `gf` field."""
  gf: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `whip` field."""
  whip: FloatFilter

  """Filter by the object’s `h9` field."""
  h9: FloatFilter

  """Filter by the object’s `hr9` field."""
  hr9: FloatFilter

  """Filter by the object’s `k9` field."""
  k9: FloatFilter

  """Filter by the object’s `bb9` field."""
  bb9: FloatFilter

  """Filter by the object’s `sow` field."""
  sow: FloatFilter

  """Checks for all expressions in this list."""
  and: [LahmanPitchingFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanPitchingFilter!]

  """Negates the expression."""
  not: LahmanPitchingFilter
}

"""An input for mutations affecting `LahmanPitching`"""
input LahmanPitchingInput {
  playerId: String!
  year: Int!
  stint: Int!
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float
}

"""
Represents an update to a `LahmanPitching`. Fields that are set will be updated.
"""
input LahmanPitchingPatch {
  playerId: String
  year: Int
  stint: Int
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float
}

type LahmanPitchingpost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: String!
  year: Int!
  round: String!
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitchingpost`.
  """
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `LahmanPitchingpost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanPitchingpostCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `round` field."""
  round: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `w` field."""
  w: Int

  """Checks for equality with the object’s `l` field."""
  l: Int

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `cg` field."""
  cg: Int

  """Checks for equality with the object’s `sho` field."""
  sho: Int

  """Checks for equality with the object’s `sv` field."""
  sv: Int

  """Checks for equality with the object’s `ipOuts` field."""
  ipOuts: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `er` field."""
  er: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `baOpp` field."""
  baOpp: Float

  """Checks for equality with the object’s `era` field."""
  era: Float

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `wp` field."""
  wp: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `bk` field."""
  bk: Int

  """Checks for equality with the object’s `bfp` field."""
  bfp: Int

  """Checks for equality with the object’s `gf` field."""
  gf: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `whip` field."""
  whip: Float

  """Checks for equality with the object’s `h9` field."""
  h9: Float

  """Checks for equality with the object’s `hr9` field."""
  hr9: Float

  """Checks for equality with the object’s `k9` field."""
  k9: Float

  """Checks for equality with the object’s `bb9` field."""
  bb9: Float

  """Checks for equality with the object’s `sow` field."""
  sow: Float
}

"""
A filter to be used against `LahmanPitchingpost` object types. All fields are combined with a logical ‘and.’
"""
input LahmanPitchingpostFilter {
  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `round` field."""
  round: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `w` field."""
  w: IntFilter

  """Filter by the object’s `l` field."""
  l: IntFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `cg` field."""
  cg: IntFilter

  """Filter by the object’s `sho` field."""
  sho: IntFilter

  """Filter by the object’s `sv` field."""
  sv: IntFilter

  """Filter by the object’s `ipOuts` field."""
  ipOuts: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `er` field."""
  er: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `baOpp` field."""
  baOpp: FloatFilter

  """Filter by the object’s `era` field."""
  era: FloatFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `wp` field."""
  wp: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `bk` field."""
  bk: IntFilter

  """Filter by the object’s `bfp` field."""
  bfp: IntFilter

  """Filter by the object’s `gf` field."""
  gf: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `whip` field."""
  whip: FloatFilter

  """Filter by the object’s `h9` field."""
  h9: FloatFilter

  """Filter by the object’s `hr9` field."""
  hr9: FloatFilter

  """Filter by the object’s `k9` field."""
  k9: FloatFilter

  """Filter by the object’s `bb9` field."""
  bb9: FloatFilter

  """Filter by the object’s `sow` field."""
  sow: FloatFilter

  """Checks for all expressions in this list."""
  and: [LahmanPitchingpostFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanPitchingpostFilter!]

  """Negates the expression."""
  not: LahmanPitchingpostFilter
}

"""An input for mutations affecting `LahmanPitchingpost`"""
input LahmanPitchingpostInput {
  playerId: String!
  year: Int!
  round: String!
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float
}

"""
Represents an update to a `LahmanPitchingpost`. Fields that are set will be updated.
"""
input LahmanPitchingpostPatch {
  playerId: String
  year: Int
  round: String
  teamId: String
  lgId: String
  w: Int
  l: Int
  g: Int
  gs: Int
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  h: Int
  er: Int
  hr: Int
  bb: Int
  so: Int
  baOpp: Float
  era: Float
  ibb: Int
  wp: Int
  hbp: Int
  bk: Int
  bfp: Int
  gf: Int
  r: Int
  sh: Int
  sf: Int
  gidp: Int
  whip: Float
  h9: Float
  hr9: Float
  k9: Float
  bb9: Float
  sow: Float
}

"""A connection to a list of `LahmanPitchingpost` values."""
type LahmanPitchingpostsConnection {
  """A list of `LahmanPitchingpost` objects."""
  nodes: [LahmanPitchingpost]!

  """
  A list of edges which contains the `LahmanPitchingpost` and cursor to aid in pagination.
  """
  edges: [LahmanPitchingpostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LahmanPitchingpost` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LahmanPitchingpost` edge in the connection."""
type LahmanPitchingpostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanPitchingpost` at the end of the edge."""
  node: LahmanPitchingpost
}

"""Methods to use when ordering `LahmanPitchingpost`."""
enum LahmanPitchingpostsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  ROUND_ASC
  ROUND_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  W_ASC
  W_DESC
  L_ASC
  L_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  CG_ASC
  CG_DESC
  SHO_ASC
  SHO_DESC
  SV_ASC
  SV_DESC
  IP_OUTS_ASC
  IP_OUTS_DESC
  H_ASC
  H_DESC
  ER_ASC
  ER_DESC
  HR_ASC
  HR_DESC
  BB_ASC
  BB_DESC
  SO_ASC
  SO_DESC
  BA_OPP_ASC
  BA_OPP_DESC
  ERA_ASC
  ERA_DESC
  IBB_ASC
  IBB_DESC
  WP_ASC
  WP_DESC
  HBP_ASC
  HBP_DESC
  BK_ASC
  BK_DESC
  BFP_ASC
  BFP_DESC
  GF_ASC
  GF_DESC
  R_ASC
  R_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  GIDP_ASC
  GIDP_DESC
  WHIP_ASC
  WHIP_DESC
  H9_ASC
  H9_DESC
  HR9_ASC
  HR9_DESC
  K9_ASC
  K9_DESC
  BB9_ASC
  BB9_DESC
  SOW_ASC
  SOW_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `LahmanPitching` values."""
type LahmanPitchingsConnection {
  """A list of `LahmanPitching` objects."""
  nodes: [LahmanPitching]!

  """
  A list of edges which contains the `LahmanPitching` and cursor to aid in pagination.
  """
  edges: [LahmanPitchingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanPitching` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanPitching` edge in the connection."""
type LahmanPitchingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanPitching` at the end of the edge."""
  node: LahmanPitching
}

"""Methods to use when ordering `LahmanPitching`."""
enum LahmanPitchingsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  YEAR_ASC
  YEAR_DESC
  STINT_ASC
  STINT_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  W_ASC
  W_DESC
  L_ASC
  L_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  CG_ASC
  CG_DESC
  SHO_ASC
  SHO_DESC
  SV_ASC
  SV_DESC
  IP_OUTS_ASC
  IP_OUTS_DESC
  H_ASC
  H_DESC
  ER_ASC
  ER_DESC
  HR_ASC
  HR_DESC
  BB_ASC
  BB_DESC
  SO_ASC
  SO_DESC
  BA_OPP_ASC
  BA_OPP_DESC
  ERA_ASC
  ERA_DESC
  IBB_ASC
  IBB_DESC
  WP_ASC
  WP_DESC
  HBP_ASC
  HBP_DESC
  BK_ASC
  BK_DESC
  BFP_ASC
  BFP_DESC
  GF_ASC
  GF_DESC
  R_ASC
  R_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  GIDP_ASC
  GIDP_DESC
  WHIP_ASC
  WHIP_DESC
  H9_ASC
  H9_DESC
  HR9_ASC
  HR9_DESC
  K9_ASC
  K9_DESC
  BB9_ASC
  BB9_DESC
  SOW_ASC
  SOW_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `LahmanSalary` values."""
type LahmanSalariesConnection {
  """A list of `LahmanSalary` objects."""
  nodes: [LahmanSalary]!

  """
  A list of edges which contains the `LahmanSalary` and cursor to aid in pagination.
  """
  edges: [LahmanSalariesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanSalary` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanSalary` edge in the connection."""
type LahmanSalariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanSalary` at the end of the edge."""
  node: LahmanSalary
}

"""Methods to use when ordering `LahmanSalary`."""
enum LahmanSalariesOrderBy {
  NATURAL
  YEAR_ASC
  YEAR_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  LG_ID_ASC
  LG_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  SALARY_ASC
  SALARY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LahmanSalary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  year: Int!
  teamId: String!
  lgId: String
  playerId: String!
  salary: BigInt

  """Reads a single `LahmanPerson` that is related to this `LahmanSalary`."""
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `LahmanSalary` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LahmanSalaryCondition {
  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `salary` field."""
  salary: BigInt
}

"""
A filter to be used against `LahmanSalary` object types. All fields are combined with a logical ‘and.’
"""
input LahmanSalaryFilter {
  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `salary` field."""
  salary: BigIntFilter

  """Checks for all expressions in this list."""
  and: [LahmanSalaryFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanSalaryFilter!]

  """Negates the expression."""
  not: LahmanSalaryFilter
}

"""An input for mutations affecting `LahmanSalary`"""
input LahmanSalaryInput {
  year: Int!
  teamId: String!
  lgId: String
  playerId: String!
  salary: BigInt
}

"""
Represents an update to a `LahmanSalary`. Fields that are set will be updated.
"""
input LahmanSalaryPatch {
  year: Int
  teamId: String
  lgId: String
  playerId: String
  salary: BigInt
}

type LahmanTeam implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  year: Int!
  lgId: String
  teamId: String!
  franchId: String
  divId: String
  rank: Int
  g: Int
  gHome: Int
  w: Int
  l: Int
  divWin: String
  wcWin: String
  lgWin: String
  wsWin: String
  r: Int
  ab: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  bb: Int
  so: Int
  sb: Int
  cs: Int
  hbp: Int
  sf: Int
  ra: Int
  er: Int
  era: Float
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  ha: Int
  hra: Int
  bba: Int
  soa: Int
  e: Int
  dp: Int
  fp: Float
  name: String
  park: String
  attendance: BigInt
  bpf: Int
  ppf: Int
  teamIdBr: String
  teamIdLahman45: String
  teamIdRetro: String

  """Reads and enables pagination through a set of `RetroTeamGame`."""
  retroTeamGamesByTeamIdAndYear(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroTeamGame`."""
    orderBy: [RetroTeamGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroTeamGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroTeamGameFilter
  ): RetroTeamGamesConnection!
}

"""
A condition to be used against `LahmanTeam` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LahmanTeamCondition {
  """Checks for equality with the object’s `year` field."""
  year: Int

  """Checks for equality with the object’s `lgId` field."""
  lgId: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `franchId` field."""
  franchId: String

  """Checks for equality with the object’s `divId` field."""
  divId: String

  """Checks for equality with the object’s `rank` field."""
  rank: Int

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gHome` field."""
  gHome: Int

  """Checks for equality with the object’s `w` field."""
  w: Int

  """Checks for equality with the object’s `l` field."""
  l: Int

  """Checks for equality with the object’s `divWin` field."""
  divWin: String

  """Checks for equality with the object’s `wcWin` field."""
  wcWin: String

  """Checks for equality with the object’s `lgWin` field."""
  lgWin: String

  """Checks for equality with the object’s `wsWin` field."""
  wsWin: String

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `ra` field."""
  ra: Int

  """Checks for equality with the object’s `er` field."""
  er: Int

  """Checks for equality with the object’s `era` field."""
  era: Float

  """Checks for equality with the object’s `cg` field."""
  cg: Int

  """Checks for equality with the object’s `sho` field."""
  sho: Int

  """Checks for equality with the object’s `sv` field."""
  sv: Int

  """Checks for equality with the object’s `ipOuts` field."""
  ipOuts: Int

  """Checks for equality with the object’s `ha` field."""
  ha: Int

  """Checks for equality with the object’s `hra` field."""
  hra: Int

  """Checks for equality with the object’s `bba` field."""
  bba: Int

  """Checks for equality with the object’s `soa` field."""
  soa: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `dp` field."""
  dp: Int

  """Checks for equality with the object’s `fp` field."""
  fp: Float

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `park` field."""
  park: String

  """Checks for equality with the object’s `attendance` field."""
  attendance: BigInt

  """Checks for equality with the object’s `bpf` field."""
  bpf: Int

  """Checks for equality with the object’s `ppf` field."""
  ppf: Int

  """Checks for equality with the object’s `teamIdBr` field."""
  teamIdBr: String

  """Checks for equality with the object’s `teamIdLahman45` field."""
  teamIdLahman45: String

  """Checks for equality with the object’s `teamIdRetro` field."""
  teamIdRetro: String
}

"""
A filter to be used against `LahmanTeam` object types. All fields are combined with a logical ‘and.’
"""
input LahmanTeamFilter {
  """Filter by the object’s `year` field."""
  year: IntFilter

  """Filter by the object’s `lgId` field."""
  lgId: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `franchId` field."""
  franchId: StringFilter

  """Filter by the object’s `divId` field."""
  divId: StringFilter

  """Filter by the object’s `rank` field."""
  rank: IntFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gHome` field."""
  gHome: IntFilter

  """Filter by the object’s `w` field."""
  w: IntFilter

  """Filter by the object’s `l` field."""
  l: IntFilter

  """Filter by the object’s `divWin` field."""
  divWin: StringFilter

  """Filter by the object’s `wcWin` field."""
  wcWin: StringFilter

  """Filter by the object’s `lgWin` field."""
  lgWin: StringFilter

  """Filter by the object’s `wsWin` field."""
  wsWin: StringFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `ra` field."""
  ra: IntFilter

  """Filter by the object’s `er` field."""
  er: IntFilter

  """Filter by the object’s `era` field."""
  era: FloatFilter

  """Filter by the object’s `cg` field."""
  cg: IntFilter

  """Filter by the object’s `sho` field."""
  sho: IntFilter

  """Filter by the object’s `sv` field."""
  sv: IntFilter

  """Filter by the object’s `ipOuts` field."""
  ipOuts: IntFilter

  """Filter by the object’s `ha` field."""
  ha: IntFilter

  """Filter by the object’s `hra` field."""
  hra: IntFilter

  """Filter by the object’s `bba` field."""
  bba: IntFilter

  """Filter by the object’s `soa` field."""
  soa: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `dp` field."""
  dp: IntFilter

  """Filter by the object’s `fp` field."""
  fp: FloatFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `park` field."""
  park: StringFilter

  """Filter by the object’s `attendance` field."""
  attendance: BigIntFilter

  """Filter by the object’s `bpf` field."""
  bpf: IntFilter

  """Filter by the object’s `ppf` field."""
  ppf: IntFilter

  """Filter by the object’s `teamIdBr` field."""
  teamIdBr: StringFilter

  """Filter by the object’s `teamIdLahman45` field."""
  teamIdLahman45: StringFilter

  """Filter by the object’s `teamIdRetro` field."""
  teamIdRetro: StringFilter

  """Checks for all expressions in this list."""
  and: [LahmanTeamFilter!]

  """Checks for any expressions in this list."""
  or: [LahmanTeamFilter!]

  """Negates the expression."""
  not: LahmanTeamFilter
}

"""An input for mutations affecting `LahmanTeam`"""
input LahmanTeamInput {
  year: Int!
  lgId: String
  teamId: String!
  franchId: String
  divId: String
  rank: Int
  g: Int
  gHome: Int
  w: Int
  l: Int
  divWin: String
  wcWin: String
  lgWin: String
  wsWin: String
  r: Int
  ab: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  bb: Int
  so: Int
  sb: Int
  cs: Int
  hbp: Int
  sf: Int
  ra: Int
  er: Int
  era: Float
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  ha: Int
  hra: Int
  bba: Int
  soa: Int
  e: Int
  dp: Int
  fp: Float
  name: String
  park: String
  attendance: BigInt
  bpf: Int
  ppf: Int
  teamIdBr: String
  teamIdLahman45: String
  teamIdRetro: String
}

"""
Represents an update to a `LahmanTeam`. Fields that are set will be updated.
"""
input LahmanTeamPatch {
  year: Int
  lgId: String
  teamId: String
  franchId: String
  divId: String
  rank: Int
  g: Int
  gHome: Int
  w: Int
  l: Int
  divWin: String
  wcWin: String
  lgWin: String
  wsWin: String
  r: Int
  ab: Int
  h: Int
  double: Int
  triple: Int
  hr: Int
  bb: Int
  so: Int
  sb: Int
  cs: Int
  hbp: Int
  sf: Int
  ra: Int
  er: Int
  era: Float
  cg: Int
  sho: Int
  sv: Int
  ipOuts: Int
  ha: Int
  hra: Int
  bba: Int
  soa: Int
  e: Int
  dp: Int
  fp: Float
  name: String
  park: String
  attendance: BigInt
  bpf: Int
  ppf: Int
  teamIdBr: String
  teamIdLahman45: String
  teamIdRetro: String
}

"""A connection to a list of `LahmanTeam` values."""
type LahmanTeamsConnection {
  """A list of `LahmanTeam` objects."""
  nodes: [LahmanTeam]!

  """
  A list of edges which contains the `LahmanTeam` and cursor to aid in pagination.
  """
  edges: [LahmanTeamsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LahmanTeam` you could get from the connection."""
  totalCount: Int!
}

"""A `LahmanTeam` edge in the connection."""
type LahmanTeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LahmanTeam` at the end of the edge."""
  node: LahmanTeam
}

"""Methods to use when ordering `LahmanTeam`."""
enum LahmanTeamsOrderBy {
  NATURAL
  YEAR_ASC
  YEAR_DESC
  LG_ID_ASC
  LG_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  FRANCH_ID_ASC
  FRANCH_ID_DESC
  DIV_ID_ASC
  DIV_ID_DESC
  RANK_ASC
  RANK_DESC
  G_ASC
  G_DESC
  G_HOME_ASC
  G_HOME_DESC
  W_ASC
  W_DESC
  L_ASC
  L_DESC
  DIV_WIN_ASC
  DIV_WIN_DESC
  WC_WIN_ASC
  WC_WIN_DESC
  LG_WIN_ASC
  LG_WIN_DESC
  WS_WIN_ASC
  WS_WIN_DESC
  R_ASC
  R_DESC
  AB_ASC
  AB_DESC
  H_ASC
  H_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  BB_ASC
  BB_DESC
  SO_ASC
  SO_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  HBP_ASC
  HBP_DESC
  SF_ASC
  SF_DESC
  RA_ASC
  RA_DESC
  ER_ASC
  ER_DESC
  ERA_ASC
  ERA_DESC
  CG_ASC
  CG_DESC
  SHO_ASC
  SHO_DESC
  SV_ASC
  SV_DESC
  IP_OUTS_ASC
  IP_OUTS_DESC
  HA_ASC
  HA_DESC
  HRA_ASC
  HRA_DESC
  BBA_ASC
  BBA_DESC
  SOA_ASC
  SOA_DESC
  E_ASC
  E_DESC
  DP_ASC
  DP_DESC
  FP_ASC
  FP_DESC
  NAME_ASC
  NAME_DESC
  PARK_ASC
  PARK_DESC
  ATTENDANCE_ASC
  ATTENDANCE_DESC
  BPF_ASC
  BPF_DESC
  PPF_ASC
  PPF_DESC
  TEAM_ID_BR_ASC
  TEAM_ID_BR_DESC
  TEAM_ID_LAHMAN45_ASC
  TEAM_ID_LAHMAN45_DESC
  TEAM_ID_RETRO_ASC
  TEAM_ID_RETRO_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `LahmanBatting`."""
  createLahmanBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanBattingInput!
  ): CreateLahmanBattingPayload

  """Creates a single `LahmanBattingpost`."""
  createLahmanBattingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanBattingpostInput!
  ): CreateLahmanBattingpostPayload

  """Creates a single `LahmanFielding`."""
  createLahmanFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanFieldingInput!
  ): CreateLahmanFieldingPayload

  """Creates a single `LahmanFieldingpost`."""
  createLahmanFieldingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanFieldingpostInput!
  ): CreateLahmanFieldingpostPayload

  """Creates a single `LahmanPark`."""
  createLahmanPark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanParkInput!
  ): CreateLahmanParkPayload

  """Creates a single `LahmanPerson`."""
  createLahmanPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanPersonInput!
  ): CreateLahmanPersonPayload

  """Creates a single `LahmanPitching`."""
  createLahmanPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanPitchingInput!
  ): CreateLahmanPitchingPayload

  """Creates a single `LahmanPitchingpost`."""
  createLahmanPitchingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanPitchingpostInput!
  ): CreateLahmanPitchingpostPayload

  """Creates a single `LahmanSalary`."""
  createLahmanSalary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanSalaryInput!
  ): CreateLahmanSalaryPayload

  """Creates a single `LahmanTeam`."""
  createLahmanTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLahmanTeamInput!
  ): CreateLahmanTeamPayload

  """Creates a single `RetroBatting`."""
  createRetroBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroBattingInput!
  ): CreateRetroBattingPayload

  """Creates a single `RetroEvent`."""
  createRetroEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroEventInput!
  ): CreateRetroEventPayload

  """Creates a single `RetroFielding`."""
  createRetroFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroFieldingInput!
  ): CreateRetroFieldingPayload

  """Creates a single `RetroGame`."""
  createRetroGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroGameInput!
  ): CreateRetroGamePayload

  """Creates a single `RetroPitching`."""
  createRetroPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroPitchingInput!
  ): CreateRetroPitchingPayload

  """Creates a single `RetroTeamGame`."""
  createRetroTeamGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRetroTeamGameInput!
  ): CreateRetroTeamGamePayload

  """
  Updates a single `LahmanBatting` using its globally unique id and a patch.
  """
  updateLahmanBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanBattingInput!
  ): UpdateLahmanBattingPayload

  """Updates a single `LahmanBatting` using a unique key and a patch."""
  updateLahmanBattingByPlayerIdAndYearAndStint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanBattingByPlayerIdAndYearAndStintInput!
  ): UpdateLahmanBattingPayload

  """
  Updates a single `LahmanBattingpost` using its globally unique id and a patch.
  """
  updateLahmanBattingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanBattingpostInput!
  ): UpdateLahmanBattingpostPayload

  """Updates a single `LahmanBattingpost` using a unique key and a patch."""
  updateLahmanBattingpostByPlayerIdAndYearAndRound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanBattingpostByPlayerIdAndYearAndRoundInput!
  ): UpdateLahmanBattingpostPayload

  """
  Updates a single `LahmanFielding` using its globally unique id and a patch.
  """
  updateLahmanFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanFieldingInput!
  ): UpdateLahmanFieldingPayload

  """Updates a single `LahmanFielding` using a unique key and a patch."""
  updateLahmanFieldingByPlayerIdAndYearAndStintAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanFieldingByPlayerIdAndYearAndStintAndPosInput!
  ): UpdateLahmanFieldingPayload

  """
  Updates a single `LahmanFieldingpost` using its globally unique id and a patch.
  """
  updateLahmanFieldingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanFieldingpostInput!
  ): UpdateLahmanFieldingpostPayload

  """Updates a single `LahmanFieldingpost` using a unique key and a patch."""
  updateLahmanFieldingpostByPlayerIdAndYearAndRoundAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanFieldingpostByPlayerIdAndYearAndRoundAndPosInput!
  ): UpdateLahmanFieldingpostPayload

  """
  Updates a single `LahmanPark` using its globally unique id and a patch.
  """
  updateLahmanPark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanParkInput!
  ): UpdateLahmanParkPayload

  """Updates a single `LahmanPark` using a unique key and a patch."""
  updateLahmanParkByParkKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanParkByParkKeyInput!
  ): UpdateLahmanParkPayload

  """
  Updates a single `LahmanPerson` using its globally unique id and a patch.
  """
  updateLahmanPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPersonInput!
  ): UpdateLahmanPersonPayload

  """Updates a single `LahmanPerson` using a unique key and a patch."""
  updateLahmanPersonByPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPersonByPlayerIdInput!
  ): UpdateLahmanPersonPayload

  """Updates a single `LahmanPerson` using a unique key and a patch."""
  updateLahmanPersonByRetroId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPersonByRetroIdInput!
  ): UpdateLahmanPersonPayload

  """
  Updates a single `LahmanPitching` using its globally unique id and a patch.
  """
  updateLahmanPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPitchingInput!
  ): UpdateLahmanPitchingPayload

  """Updates a single `LahmanPitching` using a unique key and a patch."""
  updateLahmanPitchingByPlayerIdAndYearAndStint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPitchingByPlayerIdAndYearAndStintInput!
  ): UpdateLahmanPitchingPayload

  """
  Updates a single `LahmanPitchingpost` using its globally unique id and a patch.
  """
  updateLahmanPitchingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPitchingpostInput!
  ): UpdateLahmanPitchingpostPayload

  """Updates a single `LahmanPitchingpost` using a unique key and a patch."""
  updateLahmanPitchingpostByPlayerIdAndYearAndRound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanPitchingpostByPlayerIdAndYearAndRoundInput!
  ): UpdateLahmanPitchingpostPayload

  """
  Updates a single `LahmanSalary` using its globally unique id and a patch.
  """
  updateLahmanSalary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanSalaryInput!
  ): UpdateLahmanSalaryPayload

  """Updates a single `LahmanSalary` using a unique key and a patch."""
  updateLahmanSalaryByPlayerIdAndYearAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanSalaryByPlayerIdAndYearAndTeamIdInput!
  ): UpdateLahmanSalaryPayload

  """
  Updates a single `LahmanTeam` using its globally unique id and a patch.
  """
  updateLahmanTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanTeamInput!
  ): UpdateLahmanTeamPayload

  """Updates a single `LahmanTeam` using a unique key and a patch."""
  updateLahmanTeamByTeamIdAndYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanTeamByTeamIdAndYearInput!
  ): UpdateLahmanTeamPayload

  """Updates a single `LahmanTeam` using a unique key and a patch."""
  updateLahmanTeamByTeamIdRetroAndYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLahmanTeamByTeamIdRetroAndYearInput!
  ): UpdateLahmanTeamPayload

  """
  Updates a single `RetroBatting` using its globally unique id and a patch.
  """
  updateRetroBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroBattingInput!
  ): UpdateRetroBattingPayload

  """Updates a single `RetroBatting` using a unique key and a patch."""
  updateRetroBattingByPlayerIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroBattingByPlayerIdAndGameIdInput!
  ): UpdateRetroBattingPayload

  """
  Updates a single `RetroEvent` using its globally unique id and a patch.
  """
  updateRetroEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroEventInput!
  ): UpdateRetroEventPayload

  """Updates a single `RetroEvent` using a unique key and a patch."""
  updateRetroEventByGameIdAndEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroEventByGameIdAndEventIdInput!
  ): UpdateRetroEventPayload

  """
  Updates a single `RetroFielding` using its globally unique id and a patch.
  """
  updateRetroFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroFieldingInput!
  ): UpdateRetroFieldingPayload

  """Updates a single `RetroFielding` using a unique key and a patch."""
  updateRetroFieldingByPlayerIdAndGameIdAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroFieldingByPlayerIdAndGameIdAndPosInput!
  ): UpdateRetroFieldingPayload

  """Updates a single `RetroGame` using its globally unique id and a patch."""
  updateRetroGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroGameInput!
  ): UpdateRetroGamePayload

  """Updates a single `RetroGame` using a unique key and a patch."""
  updateRetroGameByGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroGameByGameIdInput!
  ): UpdateRetroGamePayload

  """
  Updates a single `RetroPitching` using its globally unique id and a patch.
  """
  updateRetroPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroPitchingInput!
  ): UpdateRetroPitchingPayload

  """Updates a single `RetroPitching` using a unique key and a patch."""
  updateRetroPitchingByPlayerIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroPitchingByPlayerIdAndGameIdInput!
  ): UpdateRetroPitchingPayload

  """
  Updates a single `RetroTeamGame` using its globally unique id and a patch.
  """
  updateRetroTeamGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroTeamGameInput!
  ): UpdateRetroTeamGamePayload

  """Updates a single `RetroTeamGame` using a unique key and a patch."""
  updateRetroTeamGameByTeamIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRetroTeamGameByTeamIdAndGameIdInput!
  ): UpdateRetroTeamGamePayload

  """Deletes a single `LahmanBatting` using its globally unique id."""
  deleteLahmanBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanBattingInput!
  ): DeleteLahmanBattingPayload

  """Deletes a single `LahmanBatting` using a unique key."""
  deleteLahmanBattingByPlayerIdAndYearAndStint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanBattingByPlayerIdAndYearAndStintInput!
  ): DeleteLahmanBattingPayload

  """Deletes a single `LahmanBattingpost` using its globally unique id."""
  deleteLahmanBattingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanBattingpostInput!
  ): DeleteLahmanBattingpostPayload

  """Deletes a single `LahmanBattingpost` using a unique key."""
  deleteLahmanBattingpostByPlayerIdAndYearAndRound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanBattingpostByPlayerIdAndYearAndRoundInput!
  ): DeleteLahmanBattingpostPayload

  """Deletes a single `LahmanFielding` using its globally unique id."""
  deleteLahmanFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanFieldingInput!
  ): DeleteLahmanFieldingPayload

  """Deletes a single `LahmanFielding` using a unique key."""
  deleteLahmanFieldingByPlayerIdAndYearAndStintAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanFieldingByPlayerIdAndYearAndStintAndPosInput!
  ): DeleteLahmanFieldingPayload

  """Deletes a single `LahmanFieldingpost` using its globally unique id."""
  deleteLahmanFieldingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanFieldingpostInput!
  ): DeleteLahmanFieldingpostPayload

  """Deletes a single `LahmanFieldingpost` using a unique key."""
  deleteLahmanFieldingpostByPlayerIdAndYearAndRoundAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanFieldingpostByPlayerIdAndYearAndRoundAndPosInput!
  ): DeleteLahmanFieldingpostPayload

  """Deletes a single `LahmanPark` using its globally unique id."""
  deleteLahmanPark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanParkInput!
  ): DeleteLahmanParkPayload

  """Deletes a single `LahmanPark` using a unique key."""
  deleteLahmanParkByParkKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanParkByParkKeyInput!
  ): DeleteLahmanParkPayload

  """Deletes a single `LahmanPerson` using its globally unique id."""
  deleteLahmanPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPersonInput!
  ): DeleteLahmanPersonPayload

  """Deletes a single `LahmanPerson` using a unique key."""
  deleteLahmanPersonByPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPersonByPlayerIdInput!
  ): DeleteLahmanPersonPayload

  """Deletes a single `LahmanPerson` using a unique key."""
  deleteLahmanPersonByRetroId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPersonByRetroIdInput!
  ): DeleteLahmanPersonPayload

  """Deletes a single `LahmanPitching` using its globally unique id."""
  deleteLahmanPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPitchingInput!
  ): DeleteLahmanPitchingPayload

  """Deletes a single `LahmanPitching` using a unique key."""
  deleteLahmanPitchingByPlayerIdAndYearAndStint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPitchingByPlayerIdAndYearAndStintInput!
  ): DeleteLahmanPitchingPayload

  """Deletes a single `LahmanPitchingpost` using its globally unique id."""
  deleteLahmanPitchingpost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPitchingpostInput!
  ): DeleteLahmanPitchingpostPayload

  """Deletes a single `LahmanPitchingpost` using a unique key."""
  deleteLahmanPitchingpostByPlayerIdAndYearAndRound(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanPitchingpostByPlayerIdAndYearAndRoundInput!
  ): DeleteLahmanPitchingpostPayload

  """Deletes a single `LahmanSalary` using its globally unique id."""
  deleteLahmanSalary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanSalaryInput!
  ): DeleteLahmanSalaryPayload

  """Deletes a single `LahmanSalary` using a unique key."""
  deleteLahmanSalaryByPlayerIdAndYearAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanSalaryByPlayerIdAndYearAndTeamIdInput!
  ): DeleteLahmanSalaryPayload

  """Deletes a single `LahmanTeam` using its globally unique id."""
  deleteLahmanTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanTeamInput!
  ): DeleteLahmanTeamPayload

  """Deletes a single `LahmanTeam` using a unique key."""
  deleteLahmanTeamByTeamIdAndYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanTeamByTeamIdAndYearInput!
  ): DeleteLahmanTeamPayload

  """Deletes a single `LahmanTeam` using a unique key."""
  deleteLahmanTeamByTeamIdRetroAndYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLahmanTeamByTeamIdRetroAndYearInput!
  ): DeleteLahmanTeamPayload

  """Deletes a single `RetroBatting` using its globally unique id."""
  deleteRetroBatting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroBattingInput!
  ): DeleteRetroBattingPayload

  """Deletes a single `RetroBatting` using a unique key."""
  deleteRetroBattingByPlayerIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroBattingByPlayerIdAndGameIdInput!
  ): DeleteRetroBattingPayload

  """Deletes a single `RetroEvent` using its globally unique id."""
  deleteRetroEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroEventInput!
  ): DeleteRetroEventPayload

  """Deletes a single `RetroEvent` using a unique key."""
  deleteRetroEventByGameIdAndEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroEventByGameIdAndEventIdInput!
  ): DeleteRetroEventPayload

  """Deletes a single `RetroFielding` using its globally unique id."""
  deleteRetroFielding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroFieldingInput!
  ): DeleteRetroFieldingPayload

  """Deletes a single `RetroFielding` using a unique key."""
  deleteRetroFieldingByPlayerIdAndGameIdAndPos(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroFieldingByPlayerIdAndGameIdAndPosInput!
  ): DeleteRetroFieldingPayload

  """Deletes a single `RetroGame` using its globally unique id."""
  deleteRetroGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroGameInput!
  ): DeleteRetroGamePayload

  """Deletes a single `RetroGame` using a unique key."""
  deleteRetroGameByGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroGameByGameIdInput!
  ): DeleteRetroGamePayload

  """Deletes a single `RetroPitching` using its globally unique id."""
  deleteRetroPitching(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroPitchingInput!
  ): DeleteRetroPitchingPayload

  """Deletes a single `RetroPitching` using a unique key."""
  deleteRetroPitchingByPlayerIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroPitchingByPlayerIdAndGameIdInput!
  ): DeleteRetroPitchingPayload

  """Deletes a single `RetroTeamGame` using its globally unique id."""
  deleteRetroTeamGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroTeamGameInput!
  ): DeleteRetroTeamGamePayload

  """Deletes a single `RetroTeamGame` using a unique key."""
  deleteRetroTeamGameByTeamIdAndGameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRetroTeamGameByTeamIdAndGameIdInput!
  ): DeleteRetroTeamGamePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `LahmanBatting`."""
  allLahmanBattings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanBatting`."""
    orderBy: [LahmanBattingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanBattingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanBattingFilter
  ): LahmanBattingsConnection

  """Reads and enables pagination through a set of `LahmanBattingpost`."""
  allLahmanBattingposts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanBattingpost`."""
    orderBy: [LahmanBattingpostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanBattingpostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanBattingpostFilter
  ): LahmanBattingpostsConnection

  """Reads and enables pagination through a set of `LahmanFielding`."""
  allLahmanFieldings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanFielding`."""
    orderBy: [LahmanFieldingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanFieldingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanFieldingFilter
  ): LahmanFieldingsConnection

  """Reads and enables pagination through a set of `LahmanFieldingpost`."""
  allLahmanFieldingposts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanFieldingpost`."""
    orderBy: [LahmanFieldingpostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanFieldingpostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanFieldingpostFilter
  ): LahmanFieldingpostsConnection

  """Reads and enables pagination through a set of `LahmanPark`."""
  allLahmanParks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPark`."""
    orderBy: [LahmanParksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanParkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanParkFilter
  ): LahmanParksConnection

  """Reads and enables pagination through a set of `LahmanPerson`."""
  allLahmanPeople(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPerson`."""
    orderBy: [LahmanPeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanPersonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanPersonFilter
  ): LahmanPeopleConnection

  """Reads and enables pagination through a set of `LahmanPitching`."""
  allLahmanPitchings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPitching`."""
    orderBy: [LahmanPitchingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanPitchingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanPitchingFilter
  ): LahmanPitchingsConnection

  """Reads and enables pagination through a set of `LahmanPitchingpost`."""
  allLahmanPitchingposts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanPitchingpost`."""
    orderBy: [LahmanPitchingpostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanPitchingpostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanPitchingpostFilter
  ): LahmanPitchingpostsConnection

  """Reads and enables pagination through a set of `LahmanSalary`."""
  allLahmanSalaries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanSalary`."""
    orderBy: [LahmanSalariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanSalaryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanSalaryFilter
  ): LahmanSalariesConnection

  """Reads and enables pagination through a set of `LahmanTeam`."""
  allLahmanTeams(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LahmanTeam`."""
    orderBy: [LahmanTeamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LahmanTeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LahmanTeamFilter
  ): LahmanTeamsConnection

  """Reads and enables pagination through a set of `RetroBatting`."""
  allRetroBattings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroBatting`."""
    orderBy: [RetroBattingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroBattingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroBattingFilter
  ): RetroBattingsConnection

  """Reads and enables pagination through a set of `RetroEvent`."""
  allRetroEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroEventFilter
  ): RetroEventsConnection

  """Reads and enables pagination through a set of `RetroFielding`."""
  allRetroFieldings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroFielding`."""
    orderBy: [RetroFieldingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroFieldingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroFieldingFilter
  ): RetroFieldingsConnection

  """Reads and enables pagination through a set of `RetroGame`."""
  allRetroGames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroGameFilter
  ): RetroGamesConnection

  """Reads and enables pagination through a set of `RetroPitching`."""
  allRetroPitchings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroPitching`."""
    orderBy: [RetroPitchingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroPitchingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroPitchingFilter
  ): RetroPitchingsConnection

  """Reads and enables pagination through a set of `RetroTeamGame`."""
  allRetroTeamGames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroTeamGame`."""
    orderBy: [RetroTeamGamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroTeamGameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroTeamGameFilter
  ): RetroTeamGamesConnection
  lahmanBattingByPlayerIdAndYearAndStint(playerId: String!, year: Int!, stint: Int!): LahmanBatting
  lahmanBattingpostByPlayerIdAndYearAndRound(playerId: String!, year: Int!, round: String!): LahmanBattingpost
  lahmanFieldingByPlayerIdAndYearAndStintAndPos(playerId: String!, year: Int!, stint: Int!, pos: String!): LahmanFielding
  lahmanFieldingpostByPlayerIdAndYearAndRoundAndPos(playerId: String!, year: Int!, round: String!, pos: String!): LahmanFieldingpost
  lahmanParkByParkKey(parkKey: String!): LahmanPark
  lahmanPersonByPlayerId(playerId: String!): LahmanPerson
  lahmanPersonByRetroId(retroId: String!): LahmanPerson
  lahmanPitchingByPlayerIdAndYearAndStint(playerId: String!, year: Int!, stint: Int!): LahmanPitching
  lahmanPitchingpostByPlayerIdAndYearAndRound(playerId: String!, year: Int!, round: String!): LahmanPitchingpost
  lahmanSalaryByPlayerIdAndYearAndTeamId(playerId: String!, year: Int!, teamId: String!): LahmanSalary
  lahmanTeamByTeamIdAndYear(teamId: String!, year: Int!): LahmanTeam
  lahmanTeamByTeamIdRetroAndYear(teamIdRetro: String!, year: Int!): LahmanTeam
  retroBattingByPlayerIdAndGameId(playerId: String!, gameId: String!): RetroBatting
  retroEventByGameIdAndEventId(gameId: String!, eventId: Int!): RetroEvent
  retroFieldingByPlayerIdAndGameIdAndPos(playerId: String!, gameId: String!, pos: String!): RetroFielding
  retroGameByGameId(gameId: String!): RetroGame
  retroPitchingByPlayerIdAndGameId(playerId: String!, gameId: String!): RetroPitching
  retroTeamGameByTeamIdAndGameId(teamId: String!, gameId: String!): RetroTeamGame

  """Reads a single `LahmanBatting` using its globally unique `ID`."""
  lahmanBatting(
    """
    The globally unique `ID` to be used in selecting a single `LahmanBatting`.
    """
    nodeId: ID!
  ): LahmanBatting

  """Reads a single `LahmanBattingpost` using its globally unique `ID`."""
  lahmanBattingpost(
    """
    The globally unique `ID` to be used in selecting a single `LahmanBattingpost`.
    """
    nodeId: ID!
  ): LahmanBattingpost

  """Reads a single `LahmanFielding` using its globally unique `ID`."""
  lahmanFielding(
    """
    The globally unique `ID` to be used in selecting a single `LahmanFielding`.
    """
    nodeId: ID!
  ): LahmanFielding

  """Reads a single `LahmanFieldingpost` using its globally unique `ID`."""
  lahmanFieldingpost(
    """
    The globally unique `ID` to be used in selecting a single `LahmanFieldingpost`.
    """
    nodeId: ID!
  ): LahmanFieldingpost

  """Reads a single `LahmanPark` using its globally unique `ID`."""
  lahmanPark(
    """
    The globally unique `ID` to be used in selecting a single `LahmanPark`.
    """
    nodeId: ID!
  ): LahmanPark

  """Reads a single `LahmanPerson` using its globally unique `ID`."""
  lahmanPerson(
    """
    The globally unique `ID` to be used in selecting a single `LahmanPerson`.
    """
    nodeId: ID!
  ): LahmanPerson

  """Reads a single `LahmanPitching` using its globally unique `ID`."""
  lahmanPitching(
    """
    The globally unique `ID` to be used in selecting a single `LahmanPitching`.
    """
    nodeId: ID!
  ): LahmanPitching

  """Reads a single `LahmanPitchingpost` using its globally unique `ID`."""
  lahmanPitchingpost(
    """
    The globally unique `ID` to be used in selecting a single `LahmanPitchingpost`.
    """
    nodeId: ID!
  ): LahmanPitchingpost

  """Reads a single `LahmanSalary` using its globally unique `ID`."""
  lahmanSalary(
    """
    The globally unique `ID` to be used in selecting a single `LahmanSalary`.
    """
    nodeId: ID!
  ): LahmanSalary

  """Reads a single `LahmanTeam` using its globally unique `ID`."""
  lahmanTeam(
    """
    The globally unique `ID` to be used in selecting a single `LahmanTeam`.
    """
    nodeId: ID!
  ): LahmanTeam

  """Reads a single `RetroBatting` using its globally unique `ID`."""
  retroBatting(
    """
    The globally unique `ID` to be used in selecting a single `RetroBatting`.
    """
    nodeId: ID!
  ): RetroBatting

  """Reads a single `RetroEvent` using its globally unique `ID`."""
  retroEvent(
    """
    The globally unique `ID` to be used in selecting a single `RetroEvent`.
    """
    nodeId: ID!
  ): RetroEvent

  """Reads a single `RetroFielding` using its globally unique `ID`."""
  retroFielding(
    """
    The globally unique `ID` to be used in selecting a single `RetroFielding`.
    """
    nodeId: ID!
  ): RetroFielding

  """Reads a single `RetroGame` using its globally unique `ID`."""
  retroGame(
    """The globally unique `ID` to be used in selecting a single `RetroGame`."""
    nodeId: ID!
  ): RetroGame

  """Reads a single `RetroPitching` using its globally unique `ID`."""
  retroPitching(
    """
    The globally unique `ID` to be used in selecting a single `RetroPitching`.
    """
    nodeId: ID!
  ): RetroPitching

  """Reads a single `RetroTeamGame` using its globally unique `ID`."""
  retroTeamGame(
    """
    The globally unique `ID` to be used in selecting a single `RetroTeamGame`.
    """
    nodeId: ID!
  ): RetroTeamGame
}

type RetroBatting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  playerId: String!
  teamId: String
  g: Int
  pa: Int
  ab: Int
  r: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  rbi: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  sb: Int
  cs: Int
  xi: Int
  gDh: Int
  gPh: Int
  gPr: Int
  gameStart: Datetime
  year: Int

  """Reads a single `LahmanPerson` that is related to this `RetroBatting`."""
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `RetroBatting` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RetroBattingCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `pa` field."""
  pa: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `tb` field."""
  tb: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `hr4` field."""
  hr4: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `xi` field."""
  xi: Int

  """Checks for equality with the object’s `gDh` field."""
  gDh: Int

  """Checks for equality with the object’s `gPh` field."""
  gPh: Int

  """Checks for equality with the object’s `gPr` field."""
  gPr: Int

  """Checks for equality with the object’s `gameStart` field."""
  gameStart: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `RetroBatting` object types. All fields are combined with a logical ‘and.’
"""
input RetroBattingFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `pa` field."""
  pa: IntFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `tb` field."""
  tb: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `hr4` field."""
  hr4: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `xi` field."""
  xi: IntFilter

  """Filter by the object’s `gDh` field."""
  gDh: IntFilter

  """Filter by the object’s `gPh` field."""
  gPh: IntFilter

  """Filter by the object’s `gPr` field."""
  gPr: IntFilter

  """Filter by the object’s `gameStart` field."""
  gameStart: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [RetroBattingFilter!]

  """Checks for any expressions in this list."""
  or: [RetroBattingFilter!]

  """Negates the expression."""
  not: RetroBattingFilter
}

"""An input for mutations affecting `RetroBatting`"""
input RetroBattingInput {
  gameId: String!
  playerId: String!
  teamId: String
  g: Int
  pa: Int
  ab: Int
  r: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  rbi: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  sb: Int
  cs: Int
  xi: Int
  gDh: Int
  gPh: Int
  gPr: Int
  gameStart: Datetime
  year: Int
}

"""
Represents an update to a `RetroBatting`. Fields that are set will be updated.
"""
input RetroBattingPatch {
  gameId: String
  playerId: String
  teamId: String
  g: Int
  pa: Int
  ab: Int
  r: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  rbi: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  sb: Int
  cs: Int
  xi: Int
  gDh: Int
  gPh: Int
  gPr: Int
  gameStart: Datetime
  year: Int
}

"""A connection to a list of `RetroBatting` values."""
type RetroBattingsConnection {
  """A list of `RetroBatting` objects."""
  nodes: [RetroBatting]!

  """
  A list of edges which contains the `RetroBatting` and cursor to aid in pagination.
  """
  edges: [RetroBattingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroBatting` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroBatting` edge in the connection."""
type RetroBattingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroBatting` at the end of the edge."""
  node: RetroBatting
}

"""Methods to use when ordering `RetroBatting`."""
enum RetroBattingsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  G_ASC
  G_DESC
  PA_ASC
  PA_DESC
  AB_ASC
  AB_DESC
  R_ASC
  R_DESC
  H_ASC
  H_DESC
  TB_ASC
  TB_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  HR4_ASC
  HR4_DESC
  RBI_ASC
  RBI_DESC
  BB_ASC
  BB_DESC
  IBB_ASC
  IBB_DESC
  SO_ASC
  SO_DESC
  GIDP_ASC
  GIDP_DESC
  HBP_ASC
  HBP_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  XI_ASC
  XI_DESC
  G_DH_ASC
  G_DH_DESC
  G_PH_ASC
  G_PH_DESC
  G_PR_ASC
  G_PR_DESC
  GAME_START_ASC
  GAME_START_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RetroEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  innCt: Int
  homeHalf: Int
  awayScoreCt: Int
  homeScoreCt: Int
  batId: String
  pitId: String
  eventTx: String
  hCd: Int
  outs: Int
  e: Int
  eventId: Int!
  teamId: String
  opponentTeamId: String
  innRunsCt: Int
  startBasesCd: Int
  endBasesCd: Int
  r: Int
  fateRunsCt: Int
  ab: Boolean
  sh: Boolean
  sf: Boolean
  dp: Boolean
  tp: Boolean
  wp: Boolean
  pb: Boolean
  innEnd: Boolean
  pa: Boolean
  batSafeErr: Boolean
  so: Boolean
  sb: Int
  cs: Int
  bk: Boolean
  ibb: Boolean
  bb: Boolean
  hbp: Boolean
  xi: Boolean
  single: Boolean
  double: Boolean
  triple: Boolean
  hr: Boolean
  h: Boolean

  """Reads a single `RetroGame` that is related to this `RetroEvent`."""
  retroGameByGameId: RetroGame

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByBatId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByPitId: LahmanPerson
}

"""
A condition to be used against `RetroEvent` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RetroEventCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `innCt` field."""
  innCt: Int

  """Checks for equality with the object’s `homeHalf` field."""
  homeHalf: Int

  """Checks for equality with the object’s `awayScoreCt` field."""
  awayScoreCt: Int

  """Checks for equality with the object’s `homeScoreCt` field."""
  homeScoreCt: Int

  """Checks for equality with the object’s `batId` field."""
  batId: String

  """Checks for equality with the object’s `pitId` field."""
  pitId: String

  """Checks for equality with the object’s `eventTx` field."""
  eventTx: String

  """Checks for equality with the object’s `hCd` field."""
  hCd: Int

  """Checks for equality with the object’s `outs` field."""
  outs: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `eventId` field."""
  eventId: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `opponentTeamId` field."""
  opponentTeamId: String

  """Checks for equality with the object’s `innRunsCt` field."""
  innRunsCt: Int

  """Checks for equality with the object’s `startBasesCd` field."""
  startBasesCd: Int

  """Checks for equality with the object’s `endBasesCd` field."""
  endBasesCd: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `fateRunsCt` field."""
  fateRunsCt: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Boolean

  """Checks for equality with the object’s `sh` field."""
  sh: Boolean

  """Checks for equality with the object’s `sf` field."""
  sf: Boolean

  """Checks for equality with the object’s `dp` field."""
  dp: Boolean

  """Checks for equality with the object’s `tp` field."""
  tp: Boolean

  """Checks for equality with the object’s `wp` field."""
  wp: Boolean

  """Checks for equality with the object’s `pb` field."""
  pb: Boolean

  """Checks for equality with the object’s `innEnd` field."""
  innEnd: Boolean

  """Checks for equality with the object’s `pa` field."""
  pa: Boolean

  """Checks for equality with the object’s `batSafeErr` field."""
  batSafeErr: Boolean

  """Checks for equality with the object’s `so` field."""
  so: Boolean

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `bk` field."""
  bk: Boolean

  """Checks for equality with the object’s `ibb` field."""
  ibb: Boolean

  """Checks for equality with the object’s `bb` field."""
  bb: Boolean

  """Checks for equality with the object’s `hbp` field."""
  hbp: Boolean

  """Checks for equality with the object’s `xi` field."""
  xi: Boolean

  """Checks for equality with the object’s `single` field."""
  single: Boolean

  """Checks for equality with the object’s `double` field."""
  double: Boolean

  """Checks for equality with the object’s `triple` field."""
  triple: Boolean

  """Checks for equality with the object’s `hr` field."""
  hr: Boolean

  """Checks for equality with the object’s `h` field."""
  h: Boolean
}

"""
A filter to be used against `RetroEvent` object types. All fields are combined with a logical ‘and.’
"""
input RetroEventFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `innCt` field."""
  innCt: IntFilter

  """Filter by the object’s `homeHalf` field."""
  homeHalf: IntFilter

  """Filter by the object’s `awayScoreCt` field."""
  awayScoreCt: IntFilter

  """Filter by the object’s `homeScoreCt` field."""
  homeScoreCt: IntFilter

  """Filter by the object’s `batId` field."""
  batId: StringFilter

  """Filter by the object’s `pitId` field."""
  pitId: StringFilter

  """Filter by the object’s `eventTx` field."""
  eventTx: StringFilter

  """Filter by the object’s `hCd` field."""
  hCd: IntFilter

  """Filter by the object’s `outs` field."""
  outs: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `eventId` field."""
  eventId: IntFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `opponentTeamId` field."""
  opponentTeamId: StringFilter

  """Filter by the object’s `innRunsCt` field."""
  innRunsCt: IntFilter

  """Filter by the object’s `startBasesCd` field."""
  startBasesCd: IntFilter

  """Filter by the object’s `endBasesCd` field."""
  endBasesCd: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `fateRunsCt` field."""
  fateRunsCt: IntFilter

  """Filter by the object’s `ab` field."""
  ab: BooleanFilter

  """Filter by the object’s `sh` field."""
  sh: BooleanFilter

  """Filter by the object’s `sf` field."""
  sf: BooleanFilter

  """Filter by the object’s `dp` field."""
  dp: BooleanFilter

  """Filter by the object’s `tp` field."""
  tp: BooleanFilter

  """Filter by the object’s `wp` field."""
  wp: BooleanFilter

  """Filter by the object’s `pb` field."""
  pb: BooleanFilter

  """Filter by the object’s `innEnd` field."""
  innEnd: BooleanFilter

  """Filter by the object’s `pa` field."""
  pa: BooleanFilter

  """Filter by the object’s `batSafeErr` field."""
  batSafeErr: BooleanFilter

  """Filter by the object’s `so` field."""
  so: BooleanFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `bk` field."""
  bk: BooleanFilter

  """Filter by the object’s `ibb` field."""
  ibb: BooleanFilter

  """Filter by the object’s `bb` field."""
  bb: BooleanFilter

  """Filter by the object’s `hbp` field."""
  hbp: BooleanFilter

  """Filter by the object’s `xi` field."""
  xi: BooleanFilter

  """Filter by the object’s `single` field."""
  single: BooleanFilter

  """Filter by the object’s `double` field."""
  double: BooleanFilter

  """Filter by the object’s `triple` field."""
  triple: BooleanFilter

  """Filter by the object’s `hr` field."""
  hr: BooleanFilter

  """Filter by the object’s `h` field."""
  h: BooleanFilter

  """Checks for all expressions in this list."""
  and: [RetroEventFilter!]

  """Checks for any expressions in this list."""
  or: [RetroEventFilter!]

  """Negates the expression."""
  not: RetroEventFilter
}

"""An input for mutations affecting `RetroEvent`"""
input RetroEventInput {
  gameId: String!
  innCt: Int
  homeHalf: Int
  awayScoreCt: Int
  homeScoreCt: Int
  batId: String
  pitId: String
  eventTx: String
  hCd: Int
  outs: Int
  e: Int
  eventId: Int!
  teamId: String
  opponentTeamId: String
  innRunsCt: Int
  startBasesCd: Int
  endBasesCd: Int
  r: Int
  fateRunsCt: Int
  ab: Boolean
  sh: Boolean
  sf: Boolean
  dp: Boolean
  tp: Boolean
  wp: Boolean
  pb: Boolean
  innEnd: Boolean
  pa: Boolean
  batSafeErr: Boolean
  so: Boolean
  sb: Int
  cs: Int
  bk: Boolean
  ibb: Boolean
  bb: Boolean
  hbp: Boolean
  xi: Boolean
  single: Boolean
  double: Boolean
  triple: Boolean
  hr: Boolean
  h: Boolean
}

"""
Represents an update to a `RetroEvent`. Fields that are set will be updated.
"""
input RetroEventPatch {
  gameId: String
  innCt: Int
  homeHalf: Int
  awayScoreCt: Int
  homeScoreCt: Int
  batId: String
  pitId: String
  eventTx: String
  hCd: Int
  outs: Int
  e: Int
  eventId: Int
  teamId: String
  opponentTeamId: String
  innRunsCt: Int
  startBasesCd: Int
  endBasesCd: Int
  r: Int
  fateRunsCt: Int
  ab: Boolean
  sh: Boolean
  sf: Boolean
  dp: Boolean
  tp: Boolean
  wp: Boolean
  pb: Boolean
  innEnd: Boolean
  pa: Boolean
  batSafeErr: Boolean
  so: Boolean
  sb: Int
  cs: Int
  bk: Boolean
  ibb: Boolean
  bb: Boolean
  hbp: Boolean
  xi: Boolean
  single: Boolean
  double: Boolean
  triple: Boolean
  hr: Boolean
  h: Boolean
}

"""A connection to a list of `RetroEvent` values."""
type RetroEventsConnection {
  """A list of `RetroEvent` objects."""
  nodes: [RetroEvent]!

  """
  A list of edges which contains the `RetroEvent` and cursor to aid in pagination.
  """
  edges: [RetroEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroEvent` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroEvent` edge in the connection."""
type RetroEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroEvent` at the end of the edge."""
  node: RetroEvent
}

"""Methods to use when ordering `RetroEvent`."""
enum RetroEventsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  INN_CT_ASC
  INN_CT_DESC
  HOME_HALF_ASC
  HOME_HALF_DESC
  AWAY_SCORE_CT_ASC
  AWAY_SCORE_CT_DESC
  HOME_SCORE_CT_ASC
  HOME_SCORE_CT_DESC
  BAT_ID_ASC
  BAT_ID_DESC
  PIT_ID_ASC
  PIT_ID_DESC
  EVENT_TX_ASC
  EVENT_TX_DESC
  H_CD_ASC
  H_CD_DESC
  OUTS_ASC
  OUTS_DESC
  E_ASC
  E_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  OPPONENT_TEAM_ID_ASC
  OPPONENT_TEAM_ID_DESC
  INN_RUNS_CT_ASC
  INN_RUNS_CT_DESC
  START_BASES_CD_ASC
  START_BASES_CD_DESC
  END_BASES_CD_ASC
  END_BASES_CD_DESC
  R_ASC
  R_DESC
  FATE_RUNS_CT_ASC
  FATE_RUNS_CT_DESC
  AB_ASC
  AB_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  DP_ASC
  DP_DESC
  TP_ASC
  TP_DESC
  WP_ASC
  WP_DESC
  PB_ASC
  PB_DESC
  INN_END_ASC
  INN_END_DESC
  PA_ASC
  PA_DESC
  BAT_SAFE_ERR_ASC
  BAT_SAFE_ERR_DESC
  SO_ASC
  SO_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  BK_ASC
  BK_DESC
  IBB_ASC
  IBB_DESC
  BB_ASC
  BB_DESC
  HBP_ASC
  HBP_DESC
  XI_ASC
  XI_DESC
  SINGLE_ASC
  SINGLE_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  H_ASC
  H_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RetroFielding implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  playerId: String!
  pos: String!
  teamId: String
  g: Int
  gs: Int
  innOuts: Int
  tc: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  xi: Int
  gameStart: Datetime
  year: Int

  """Reads a single `LahmanPerson` that is related to this `RetroFielding`."""
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `RetroFielding` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RetroFieldingCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `pos` field."""
  pos: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `innOuts` field."""
  innOuts: Int

  """Checks for equality with the object’s `tc` field."""
  tc: Int

  """Checks for equality with the object’s `po` field."""
  po: Int

  """Checks for equality with the object’s `a` field."""
  a: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `dp` field."""
  dp: Int

  """Checks for equality with the object’s `tp` field."""
  tp: Int

  """Checks for equality with the object’s `pb` field."""
  pb: Int

  """Checks for equality with the object’s `xi` field."""
  xi: Int

  """Checks for equality with the object’s `gameStart` field."""
  gameStart: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `RetroFielding` object types. All fields are combined with a logical ‘and.’
"""
input RetroFieldingFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `pos` field."""
  pos: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `innOuts` field."""
  innOuts: IntFilter

  """Filter by the object’s `tc` field."""
  tc: IntFilter

  """Filter by the object’s `po` field."""
  po: IntFilter

  """Filter by the object’s `a` field."""
  a: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `dp` field."""
  dp: IntFilter

  """Filter by the object’s `tp` field."""
  tp: IntFilter

  """Filter by the object’s `pb` field."""
  pb: IntFilter

  """Filter by the object’s `xi` field."""
  xi: IntFilter

  """Filter by the object’s `gameStart` field."""
  gameStart: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [RetroFieldingFilter!]

  """Checks for any expressions in this list."""
  or: [RetroFieldingFilter!]

  """Negates the expression."""
  not: RetroFieldingFilter
}

"""An input for mutations affecting `RetroFielding`"""
input RetroFieldingInput {
  gameId: String!
  playerId: String!
  pos: String!
  teamId: String
  g: Int
  gs: Int
  innOuts: Int
  tc: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  xi: Int
  gameStart: Datetime
  year: Int
}

"""
Represents an update to a `RetroFielding`. Fields that are set will be updated.
"""
input RetroFieldingPatch {
  gameId: String
  playerId: String
  pos: String
  teamId: String
  g: Int
  gs: Int
  innOuts: Int
  tc: Int
  po: Int
  a: Int
  e: Int
  dp: Int
  tp: Int
  pb: Int
  xi: Int
  gameStart: Datetime
  year: Int
}

"""A connection to a list of `RetroFielding` values."""
type RetroFieldingsConnection {
  """A list of `RetroFielding` objects."""
  nodes: [RetroFielding]!

  """
  A list of edges which contains the `RetroFielding` and cursor to aid in pagination.
  """
  edges: [RetroFieldingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroFielding` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroFielding` edge in the connection."""
type RetroFieldingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroFielding` at the end of the edge."""
  node: RetroFielding
}

"""Methods to use when ordering `RetroFielding`."""
enum RetroFieldingsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  POS_ASC
  POS_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  INN_OUTS_ASC
  INN_OUTS_DESC
  TC_ASC
  TC_DESC
  PO_ASC
  PO_DESC
  A_ASC
  A_DESC
  E_ASC
  E_DESC
  DP_ASC
  DP_DESC
  TP_ASC
  TP_DESC
  PB_ASC
  PB_DESC
  XI_ASC
  XI_DESC
  GAME_START_ASC
  GAME_START_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RetroGame implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  gameStart: Datetime
  gameCt: Int
  daynightParkCd: String
  parkId: String
  base4UmpId: String
  base1UmpId: String
  base2UmpId: String
  base3UmpId: String
  scorerRecordId: String
  translatorRecordId: String
  inputterRecordId: String
  inputRecordTs: String
  methodRecordCd: Int
  pitchesRecordCd: Int
  minutesGameCt: Int
  innCt: Int
  winPitId: String
  losePitId: String
  savePitId: String
  gwrbiBatId: String
  outsCt: Int
  winPitNameTx: String
  losePitNameTx: String
  savePitNameTx: String
  goaheadRbiId: String
  goaheadRbiNameTx: String
  dh: Boolean
  attendance: BigInt
  temperature: Int
  windDirection: String
  windSpeed: Int
  fieldCondition: String
  precipType: String
  skyCondition: String

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByWinPitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByLosePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonBySavePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByGwrbiBatId: LahmanPerson

  """Reads and enables pagination through a set of `RetroEvent`."""
  retroEventsByGameId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RetroEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RetroEventFilter
  ): RetroEventsConnection!
}

"""
A condition to be used against `RetroGame` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RetroGameCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `gameStart` field."""
  gameStart: Datetime

  """Checks for equality with the object’s `gameCt` field."""
  gameCt: Int

  """Checks for equality with the object’s `daynightParkCd` field."""
  daynightParkCd: String

  """Checks for equality with the object’s `parkId` field."""
  parkId: String

  """Checks for equality with the object’s `base4UmpId` field."""
  base4UmpId: String

  """Checks for equality with the object’s `base1UmpId` field."""
  base1UmpId: String

  """Checks for equality with the object’s `base2UmpId` field."""
  base2UmpId: String

  """Checks for equality with the object’s `base3UmpId` field."""
  base3UmpId: String

  """Checks for equality with the object’s `scorerRecordId` field."""
  scorerRecordId: String

  """Checks for equality with the object’s `translatorRecordId` field."""
  translatorRecordId: String

  """Checks for equality with the object’s `inputterRecordId` field."""
  inputterRecordId: String

  """Checks for equality with the object’s `inputRecordTs` field."""
  inputRecordTs: String

  """Checks for equality with the object’s `methodRecordCd` field."""
  methodRecordCd: Int

  """Checks for equality with the object’s `pitchesRecordCd` field."""
  pitchesRecordCd: Int

  """Checks for equality with the object’s `minutesGameCt` field."""
  minutesGameCt: Int

  """Checks for equality with the object’s `innCt` field."""
  innCt: Int

  """Checks for equality with the object’s `winPitId` field."""
  winPitId: String

  """Checks for equality with the object’s `losePitId` field."""
  losePitId: String

  """Checks for equality with the object’s `savePitId` field."""
  savePitId: String

  """Checks for equality with the object’s `gwrbiBatId` field."""
  gwrbiBatId: String

  """Checks for equality with the object’s `outsCt` field."""
  outsCt: Int

  """Checks for equality with the object’s `winPitNameTx` field."""
  winPitNameTx: String

  """Checks for equality with the object’s `losePitNameTx` field."""
  losePitNameTx: String

  """Checks for equality with the object’s `savePitNameTx` field."""
  savePitNameTx: String

  """Checks for equality with the object’s `goaheadRbiId` field."""
  goaheadRbiId: String

  """Checks for equality with the object’s `goaheadRbiNameTx` field."""
  goaheadRbiNameTx: String

  """Checks for equality with the object’s `dh` field."""
  dh: Boolean

  """Checks for equality with the object’s `attendance` field."""
  attendance: BigInt

  """Checks for equality with the object’s `temperature` field."""
  temperature: Int

  """Checks for equality with the object’s `windDirection` field."""
  windDirection: String

  """Checks for equality with the object’s `windSpeed` field."""
  windSpeed: Int

  """Checks for equality with the object’s `fieldCondition` field."""
  fieldCondition: String

  """Checks for equality with the object’s `precipType` field."""
  precipType: String

  """Checks for equality with the object’s `skyCondition` field."""
  skyCondition: String
}

"""
A filter to be used against `RetroGame` object types. All fields are combined with a logical ‘and.’
"""
input RetroGameFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `gameStart` field."""
  gameStart: DatetimeFilter

  """Filter by the object’s `gameCt` field."""
  gameCt: IntFilter

  """Filter by the object’s `daynightParkCd` field."""
  daynightParkCd: StringFilter

  """Filter by the object’s `parkId` field."""
  parkId: StringFilter

  """Filter by the object’s `base4UmpId` field."""
  base4UmpId: StringFilter

  """Filter by the object’s `base1UmpId` field."""
  base1UmpId: StringFilter

  """Filter by the object’s `base2UmpId` field."""
  base2UmpId: StringFilter

  """Filter by the object’s `base3UmpId` field."""
  base3UmpId: StringFilter

  """Filter by the object’s `scorerRecordId` field."""
  scorerRecordId: StringFilter

  """Filter by the object’s `translatorRecordId` field."""
  translatorRecordId: StringFilter

  """Filter by the object’s `inputterRecordId` field."""
  inputterRecordId: StringFilter

  """Filter by the object’s `inputRecordTs` field."""
  inputRecordTs: StringFilter

  """Filter by the object’s `methodRecordCd` field."""
  methodRecordCd: IntFilter

  """Filter by the object’s `pitchesRecordCd` field."""
  pitchesRecordCd: IntFilter

  """Filter by the object’s `minutesGameCt` field."""
  minutesGameCt: IntFilter

  """Filter by the object’s `innCt` field."""
  innCt: IntFilter

  """Filter by the object’s `winPitId` field."""
  winPitId: StringFilter

  """Filter by the object’s `losePitId` field."""
  losePitId: StringFilter

  """Filter by the object’s `savePitId` field."""
  savePitId: StringFilter

  """Filter by the object’s `gwrbiBatId` field."""
  gwrbiBatId: StringFilter

  """Filter by the object’s `outsCt` field."""
  outsCt: IntFilter

  """Filter by the object’s `winPitNameTx` field."""
  winPitNameTx: StringFilter

  """Filter by the object’s `losePitNameTx` field."""
  losePitNameTx: StringFilter

  """Filter by the object’s `savePitNameTx` field."""
  savePitNameTx: StringFilter

  """Filter by the object’s `goaheadRbiId` field."""
  goaheadRbiId: StringFilter

  """Filter by the object’s `goaheadRbiNameTx` field."""
  goaheadRbiNameTx: StringFilter

  """Filter by the object’s `dh` field."""
  dh: BooleanFilter

  """Filter by the object’s `attendance` field."""
  attendance: BigIntFilter

  """Filter by the object’s `temperature` field."""
  temperature: IntFilter

  """Filter by the object’s `windDirection` field."""
  windDirection: StringFilter

  """Filter by the object’s `windSpeed` field."""
  windSpeed: IntFilter

  """Filter by the object’s `fieldCondition` field."""
  fieldCondition: StringFilter

  """Filter by the object’s `precipType` field."""
  precipType: StringFilter

  """Filter by the object’s `skyCondition` field."""
  skyCondition: StringFilter

  """Checks for all expressions in this list."""
  and: [RetroGameFilter!]

  """Checks for any expressions in this list."""
  or: [RetroGameFilter!]

  """Negates the expression."""
  not: RetroGameFilter
}

"""An input for mutations affecting `RetroGame`"""
input RetroGameInput {
  gameId: String!
  gameStart: Datetime
  gameCt: Int
  daynightParkCd: String
  parkId: String
  base4UmpId: String
  base1UmpId: String
  base2UmpId: String
  base3UmpId: String
  scorerRecordId: String
  translatorRecordId: String
  inputterRecordId: String
  inputRecordTs: String
  methodRecordCd: Int
  pitchesRecordCd: Int
  minutesGameCt: Int
  innCt: Int
  winPitId: String
  losePitId: String
  savePitId: String
  gwrbiBatId: String
  outsCt: Int
  winPitNameTx: String
  losePitNameTx: String
  savePitNameTx: String
  goaheadRbiId: String
  goaheadRbiNameTx: String
  dh: Boolean
  attendance: BigInt
  temperature: Int
  windDirection: String
  windSpeed: Int
  fieldCondition: String
  precipType: String
  skyCondition: String
}

"""
Represents an update to a `RetroGame`. Fields that are set will be updated.
"""
input RetroGamePatch {
  gameId: String
  gameStart: Datetime
  gameCt: Int
  daynightParkCd: String
  parkId: String
  base4UmpId: String
  base1UmpId: String
  base2UmpId: String
  base3UmpId: String
  scorerRecordId: String
  translatorRecordId: String
  inputterRecordId: String
  inputRecordTs: String
  methodRecordCd: Int
  pitchesRecordCd: Int
  minutesGameCt: Int
  innCt: Int
  winPitId: String
  losePitId: String
  savePitId: String
  gwrbiBatId: String
  outsCt: Int
  winPitNameTx: String
  losePitNameTx: String
  savePitNameTx: String
  goaheadRbiId: String
  goaheadRbiNameTx: String
  dh: Boolean
  attendance: BigInt
  temperature: Int
  windDirection: String
  windSpeed: Int
  fieldCondition: String
  precipType: String
  skyCondition: String
}

"""A connection to a list of `RetroGame` values."""
type RetroGamesConnection {
  """A list of `RetroGame` objects."""
  nodes: [RetroGame]!

  """
  A list of edges which contains the `RetroGame` and cursor to aid in pagination.
  """
  edges: [RetroGamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroGame` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroGame` edge in the connection."""
type RetroGamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroGame` at the end of the edge."""
  node: RetroGame
}

"""Methods to use when ordering `RetroGame`."""
enum RetroGamesOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  GAME_START_ASC
  GAME_START_DESC
  GAME_CT_ASC
  GAME_CT_DESC
  DAYNIGHT_PARK_CD_ASC
  DAYNIGHT_PARK_CD_DESC
  PARK_ID_ASC
  PARK_ID_DESC
  BASE4_UMP_ID_ASC
  BASE4_UMP_ID_DESC
  BASE1_UMP_ID_ASC
  BASE1_UMP_ID_DESC
  BASE2_UMP_ID_ASC
  BASE2_UMP_ID_DESC
  BASE3_UMP_ID_ASC
  BASE3_UMP_ID_DESC
  SCORER_RECORD_ID_ASC
  SCORER_RECORD_ID_DESC
  TRANSLATOR_RECORD_ID_ASC
  TRANSLATOR_RECORD_ID_DESC
  INPUTTER_RECORD_ID_ASC
  INPUTTER_RECORD_ID_DESC
  INPUT_RECORD_TS_ASC
  INPUT_RECORD_TS_DESC
  METHOD_RECORD_CD_ASC
  METHOD_RECORD_CD_DESC
  PITCHES_RECORD_CD_ASC
  PITCHES_RECORD_CD_DESC
  MINUTES_GAME_CT_ASC
  MINUTES_GAME_CT_DESC
  INN_CT_ASC
  INN_CT_DESC
  WIN_PIT_ID_ASC
  WIN_PIT_ID_DESC
  LOSE_PIT_ID_ASC
  LOSE_PIT_ID_DESC
  SAVE_PIT_ID_ASC
  SAVE_PIT_ID_DESC
  GWRBI_BAT_ID_ASC
  GWRBI_BAT_ID_DESC
  OUTS_CT_ASC
  OUTS_CT_DESC
  WIN_PIT_NAME_TX_ASC
  WIN_PIT_NAME_TX_DESC
  LOSE_PIT_NAME_TX_ASC
  LOSE_PIT_NAME_TX_DESC
  SAVE_PIT_NAME_TX_ASC
  SAVE_PIT_NAME_TX_DESC
  GOAHEAD_RBI_ID_ASC
  GOAHEAD_RBI_ID_DESC
  GOAHEAD_RBI_NAME_TX_ASC
  GOAHEAD_RBI_NAME_TX_DESC
  DH_ASC
  DH_DESC
  ATTENDANCE_ASC
  ATTENDANCE_DESC
  TEMPERATURE_ASC
  TEMPERATURE_DESC
  WIND_DIRECTION_ASC
  WIND_DIRECTION_DESC
  WIND_SPEED_ASC
  WIND_SPEED_DESC
  FIELD_CONDITION_ASC
  FIELD_CONDITION_DESC
  PRECIP_TYPE_ASC
  PRECIP_TYPE_DESC
  SKY_CONDITION_ASC
  SKY_CONDITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RetroPitching implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  playerId: String!
  teamId: String
  g: Int
  gs: Int
  cg: Int
  sho: Int
  gf: Int
  w: Int
  l: Int
  sv: Int
  out: Int
  tbf: Int
  ab: Int
  r: Int
  er: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  xi: Int
  wp: Int
  bk: Int
  ir: Int
  irs: Int
  go: Int
  ao: Int
  pitch: Int
  strike: Int
  gameStart: Datetime
  year: Int

  """Reads a single `LahmanPerson` that is related to this `RetroPitching`."""
  lahmanPersonByPlayerId: LahmanPerson
}

"""
A condition to be used against `RetroPitching` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RetroPitchingCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `playerId` field."""
  playerId: String

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `g` field."""
  g: Int

  """Checks for equality with the object’s `gs` field."""
  gs: Int

  """Checks for equality with the object’s `cg` field."""
  cg: Int

  """Checks for equality with the object’s `sho` field."""
  sho: Int

  """Checks for equality with the object’s `gf` field."""
  gf: Int

  """Checks for equality with the object’s `w` field."""
  w: Int

  """Checks for equality with the object’s `l` field."""
  l: Int

  """Checks for equality with the object’s `sv` field."""
  sv: Int

  """Checks for equality with the object’s `out` field."""
  out: Int

  """Checks for equality with the object’s `tbf` field."""
  tbf: Int

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `er` field."""
  er: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `tb` field."""
  tb: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `hr4` field."""
  hr4: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `xi` field."""
  xi: Int

  """Checks for equality with the object’s `wp` field."""
  wp: Int

  """Checks for equality with the object’s `bk` field."""
  bk: Int

  """Checks for equality with the object’s `ir` field."""
  ir: Int

  """Checks for equality with the object’s `irs` field."""
  irs: Int

  """Checks for equality with the object’s `go` field."""
  go: Int

  """Checks for equality with the object’s `ao` field."""
  ao: Int

  """Checks for equality with the object’s `pitch` field."""
  pitch: Int

  """Checks for equality with the object’s `strike` field."""
  strike: Int

  """Checks for equality with the object’s `gameStart` field."""
  gameStart: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `RetroPitching` object types. All fields are combined with a logical ‘and.’
"""
input RetroPitchingFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `playerId` field."""
  playerId: StringFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `g` field."""
  g: IntFilter

  """Filter by the object’s `gs` field."""
  gs: IntFilter

  """Filter by the object’s `cg` field."""
  cg: IntFilter

  """Filter by the object’s `sho` field."""
  sho: IntFilter

  """Filter by the object’s `gf` field."""
  gf: IntFilter

  """Filter by the object’s `w` field."""
  w: IntFilter

  """Filter by the object’s `l` field."""
  l: IntFilter

  """Filter by the object’s `sv` field."""
  sv: IntFilter

  """Filter by the object’s `out` field."""
  out: IntFilter

  """Filter by the object’s `tbf` field."""
  tbf: IntFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `er` field."""
  er: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `tb` field."""
  tb: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `hr4` field."""
  hr4: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `xi` field."""
  xi: IntFilter

  """Filter by the object’s `wp` field."""
  wp: IntFilter

  """Filter by the object’s `bk` field."""
  bk: IntFilter

  """Filter by the object’s `ir` field."""
  ir: IntFilter

  """Filter by the object’s `irs` field."""
  irs: IntFilter

  """Filter by the object’s `go` field."""
  go: IntFilter

  """Filter by the object’s `ao` field."""
  ao: IntFilter

  """Filter by the object’s `pitch` field."""
  pitch: IntFilter

  """Filter by the object’s `strike` field."""
  strike: IntFilter

  """Filter by the object’s `gameStart` field."""
  gameStart: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [RetroPitchingFilter!]

  """Checks for any expressions in this list."""
  or: [RetroPitchingFilter!]

  """Negates the expression."""
  not: RetroPitchingFilter
}

"""An input for mutations affecting `RetroPitching`"""
input RetroPitchingInput {
  gameId: String!
  playerId: String!
  teamId: String
  g: Int
  gs: Int
  cg: Int
  sho: Int
  gf: Int
  w: Int
  l: Int
  sv: Int
  out: Int
  tbf: Int
  ab: Int
  r: Int
  er: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  xi: Int
  wp: Int
  bk: Int
  ir: Int
  irs: Int
  go: Int
  ao: Int
  pitch: Int
  strike: Int
  gameStart: Datetime
  year: Int
}

"""
Represents an update to a `RetroPitching`. Fields that are set will be updated.
"""
input RetroPitchingPatch {
  gameId: String
  playerId: String
  teamId: String
  g: Int
  gs: Int
  cg: Int
  sho: Int
  gf: Int
  w: Int
  l: Int
  sv: Int
  out: Int
  tbf: Int
  ab: Int
  r: Int
  er: Int
  h: Int
  tb: Int
  double: Int
  triple: Int
  hr: Int
  hr4: Int
  bb: Int
  ibb: Int
  so: Int
  gidp: Int
  hbp: Int
  sh: Int
  sf: Int
  xi: Int
  wp: Int
  bk: Int
  ir: Int
  irs: Int
  go: Int
  ao: Int
  pitch: Int
  strike: Int
  gameStart: Datetime
  year: Int
}

"""A connection to a list of `RetroPitching` values."""
type RetroPitchingsConnection {
  """A list of `RetroPitching` objects."""
  nodes: [RetroPitching]!

  """
  A list of edges which contains the `RetroPitching` and cursor to aid in pagination.
  """
  edges: [RetroPitchingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroPitching` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroPitching` edge in the connection."""
type RetroPitchingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroPitching` at the end of the edge."""
  node: RetroPitching
}

"""Methods to use when ordering `RetroPitching`."""
enum RetroPitchingsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  G_ASC
  G_DESC
  GS_ASC
  GS_DESC
  CG_ASC
  CG_DESC
  SHO_ASC
  SHO_DESC
  GF_ASC
  GF_DESC
  W_ASC
  W_DESC
  L_ASC
  L_DESC
  SV_ASC
  SV_DESC
  OUT_ASC
  OUT_DESC
  TBF_ASC
  TBF_DESC
  AB_ASC
  AB_DESC
  R_ASC
  R_DESC
  ER_ASC
  ER_DESC
  H_ASC
  H_DESC
  TB_ASC
  TB_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  HR4_ASC
  HR4_DESC
  BB_ASC
  BB_DESC
  IBB_ASC
  IBB_DESC
  SO_ASC
  SO_DESC
  GIDP_ASC
  GIDP_DESC
  HBP_ASC
  HBP_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  XI_ASC
  XI_DESC
  WP_ASC
  WP_DESC
  BK_ASC
  BK_DESC
  IR_ASC
  IR_DESC
  IRS_ASC
  IRS_DESC
  GO_ASC
  GO_DESC
  AO_ASC
  AO_DESC
  PITCH_ASC
  PITCH_DESC
  STRIKE_ASC
  STRIKE_DESC
  GAME_START_ASC
  GAME_START_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RetroTeamGame implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: String!
  batLast: Boolean
  teamId: String!
  startPitId: String
  opponentTeamId: String
  r: Int
  h: Int
  e: Int
  lob: Int
  lineup1BatId: String
  lineup1FldCd: Int
  lineup2BatId: String
  lineup2FldCd: Int
  lineup3BatId: String
  lineup3FldCd: Int
  lineup4BatId: String
  lineup4FldCd: Int
  lineup5BatId: String
  lineup5FldCd: Int
  lineup6BatId: String
  lineup6FldCd: Int
  lineup7BatId: String
  lineup7FldCd: Int
  lineup8BatId: String
  lineup8FldCd: Int
  lineup9BatId: String
  lineup9FldCd: Int
  finishPitId: String
  teamLeagueId: String
  lineTx: String
  ab: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sh: Int
  sf: Int
  hbp: Int
  bb: Int
  ibb: Int
  so: Int
  sb: Int
  cs: Int
  gidp: Int
  xi: Int
  pitcherCt: Int
  er: Int
  ter: Int
  wp: Int
  bk: Int
  po: Int
  a: Int
  pb: Int
  dp: Int
  tp: Int
  lineup1BatNameTx: String
  lineup2BatNameTx: String
  lineup3BatNameTx: String
  lineup4BatNameTx: String
  lineup5BatNameTx: String
  lineup6BatNameTx: String
  lineup7BatNameTx: String
  lineup8BatNameTx: String
  lineup9BatNameTx: String
  gameStart: Datetime
  year: Int

  """Reads a single `LahmanTeam` that is related to this `RetroTeamGame`."""
  lahmanTeamByTeamIdAndYear: LahmanTeam
}

"""
A condition to be used against `RetroTeamGame` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RetroTeamGameCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: String

  """Checks for equality with the object’s `batLast` field."""
  batLast: Boolean

  """Checks for equality with the object’s `teamId` field."""
  teamId: String

  """Checks for equality with the object’s `startPitId` field."""
  startPitId: String

  """Checks for equality with the object’s `opponentTeamId` field."""
  opponentTeamId: String

  """Checks for equality with the object’s `r` field."""
  r: Int

  """Checks for equality with the object’s `h` field."""
  h: Int

  """Checks for equality with the object’s `e` field."""
  e: Int

  """Checks for equality with the object’s `lob` field."""
  lob: Int

  """Checks for equality with the object’s `lineup1BatId` field."""
  lineup1BatId: String

  """Checks for equality with the object’s `lineup1FldCd` field."""
  lineup1FldCd: Int

  """Checks for equality with the object’s `lineup2BatId` field."""
  lineup2BatId: String

  """Checks for equality with the object’s `lineup2FldCd` field."""
  lineup2FldCd: Int

  """Checks for equality with the object’s `lineup3BatId` field."""
  lineup3BatId: String

  """Checks for equality with the object’s `lineup3FldCd` field."""
  lineup3FldCd: Int

  """Checks for equality with the object’s `lineup4BatId` field."""
  lineup4BatId: String

  """Checks for equality with the object’s `lineup4FldCd` field."""
  lineup4FldCd: Int

  """Checks for equality with the object’s `lineup5BatId` field."""
  lineup5BatId: String

  """Checks for equality with the object’s `lineup5FldCd` field."""
  lineup5FldCd: Int

  """Checks for equality with the object’s `lineup6BatId` field."""
  lineup6BatId: String

  """Checks for equality with the object’s `lineup6FldCd` field."""
  lineup6FldCd: Int

  """Checks for equality with the object’s `lineup7BatId` field."""
  lineup7BatId: String

  """Checks for equality with the object’s `lineup7FldCd` field."""
  lineup7FldCd: Int

  """Checks for equality with the object’s `lineup8BatId` field."""
  lineup8BatId: String

  """Checks for equality with the object’s `lineup8FldCd` field."""
  lineup8FldCd: Int

  """Checks for equality with the object’s `lineup9BatId` field."""
  lineup9BatId: String

  """Checks for equality with the object’s `lineup9FldCd` field."""
  lineup9FldCd: Int

  """Checks for equality with the object’s `finishPitId` field."""
  finishPitId: String

  """Checks for equality with the object’s `teamLeagueId` field."""
  teamLeagueId: String

  """Checks for equality with the object’s `lineTx` field."""
  lineTx: String

  """Checks for equality with the object’s `ab` field."""
  ab: Int

  """Checks for equality with the object’s `double` field."""
  double: Int

  """Checks for equality with the object’s `triple` field."""
  triple: Int

  """Checks for equality with the object’s `hr` field."""
  hr: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `sh` field."""
  sh: Int

  """Checks for equality with the object’s `sf` field."""
  sf: Int

  """Checks for equality with the object’s `hbp` field."""
  hbp: Int

  """Checks for equality with the object’s `bb` field."""
  bb: Int

  """Checks for equality with the object’s `ibb` field."""
  ibb: Int

  """Checks for equality with the object’s `so` field."""
  so: Int

  """Checks for equality with the object’s `sb` field."""
  sb: Int

  """Checks for equality with the object’s `cs` field."""
  cs: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `xi` field."""
  xi: Int

  """Checks for equality with the object’s `pitcherCt` field."""
  pitcherCt: Int

  """Checks for equality with the object’s `er` field."""
  er: Int

  """Checks for equality with the object’s `ter` field."""
  ter: Int

  """Checks for equality with the object’s `wp` field."""
  wp: Int

  """Checks for equality with the object’s `bk` field."""
  bk: Int

  """Checks for equality with the object’s `po` field."""
  po: Int

  """Checks for equality with the object’s `a` field."""
  a: Int

  """Checks for equality with the object’s `pb` field."""
  pb: Int

  """Checks for equality with the object’s `dp` field."""
  dp: Int

  """Checks for equality with the object’s `tp` field."""
  tp: Int

  """Checks for equality with the object’s `lineup1BatNameTx` field."""
  lineup1BatNameTx: String

  """Checks for equality with the object’s `lineup2BatNameTx` field."""
  lineup2BatNameTx: String

  """Checks for equality with the object’s `lineup3BatNameTx` field."""
  lineup3BatNameTx: String

  """Checks for equality with the object’s `lineup4BatNameTx` field."""
  lineup4BatNameTx: String

  """Checks for equality with the object’s `lineup5BatNameTx` field."""
  lineup5BatNameTx: String

  """Checks for equality with the object’s `lineup6BatNameTx` field."""
  lineup6BatNameTx: String

  """Checks for equality with the object’s `lineup7BatNameTx` field."""
  lineup7BatNameTx: String

  """Checks for equality with the object’s `lineup8BatNameTx` field."""
  lineup8BatNameTx: String

  """Checks for equality with the object’s `lineup9BatNameTx` field."""
  lineup9BatNameTx: String

  """Checks for equality with the object’s `gameStart` field."""
  gameStart: Datetime

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `RetroTeamGame` object types. All fields are combined with a logical ‘and.’
"""
input RetroTeamGameFilter {
  """Filter by the object’s `gameId` field."""
  gameId: StringFilter

  """Filter by the object’s `batLast` field."""
  batLast: BooleanFilter

  """Filter by the object’s `teamId` field."""
  teamId: StringFilter

  """Filter by the object’s `startPitId` field."""
  startPitId: StringFilter

  """Filter by the object’s `opponentTeamId` field."""
  opponentTeamId: StringFilter

  """Filter by the object’s `r` field."""
  r: IntFilter

  """Filter by the object’s `h` field."""
  h: IntFilter

  """Filter by the object’s `e` field."""
  e: IntFilter

  """Filter by the object’s `lob` field."""
  lob: IntFilter

  """Filter by the object’s `lineup1BatId` field."""
  lineup1BatId: StringFilter

  """Filter by the object’s `lineup1FldCd` field."""
  lineup1FldCd: IntFilter

  """Filter by the object’s `lineup2BatId` field."""
  lineup2BatId: StringFilter

  """Filter by the object’s `lineup2FldCd` field."""
  lineup2FldCd: IntFilter

  """Filter by the object’s `lineup3BatId` field."""
  lineup3BatId: StringFilter

  """Filter by the object’s `lineup3FldCd` field."""
  lineup3FldCd: IntFilter

  """Filter by the object’s `lineup4BatId` field."""
  lineup4BatId: StringFilter

  """Filter by the object’s `lineup4FldCd` field."""
  lineup4FldCd: IntFilter

  """Filter by the object’s `lineup5BatId` field."""
  lineup5BatId: StringFilter

  """Filter by the object’s `lineup5FldCd` field."""
  lineup5FldCd: IntFilter

  """Filter by the object’s `lineup6BatId` field."""
  lineup6BatId: StringFilter

  """Filter by the object’s `lineup6FldCd` field."""
  lineup6FldCd: IntFilter

  """Filter by the object’s `lineup7BatId` field."""
  lineup7BatId: StringFilter

  """Filter by the object’s `lineup7FldCd` field."""
  lineup7FldCd: IntFilter

  """Filter by the object’s `lineup8BatId` field."""
  lineup8BatId: StringFilter

  """Filter by the object’s `lineup8FldCd` field."""
  lineup8FldCd: IntFilter

  """Filter by the object’s `lineup9BatId` field."""
  lineup9BatId: StringFilter

  """Filter by the object’s `lineup9FldCd` field."""
  lineup9FldCd: IntFilter

  """Filter by the object’s `finishPitId` field."""
  finishPitId: StringFilter

  """Filter by the object’s `teamLeagueId` field."""
  teamLeagueId: StringFilter

  """Filter by the object’s `lineTx` field."""
  lineTx: StringFilter

  """Filter by the object’s `ab` field."""
  ab: IntFilter

  """Filter by the object’s `double` field."""
  double: IntFilter

  """Filter by the object’s `triple` field."""
  triple: IntFilter

  """Filter by the object’s `hr` field."""
  hr: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `sh` field."""
  sh: IntFilter

  """Filter by the object’s `sf` field."""
  sf: IntFilter

  """Filter by the object’s `hbp` field."""
  hbp: IntFilter

  """Filter by the object’s `bb` field."""
  bb: IntFilter

  """Filter by the object’s `ibb` field."""
  ibb: IntFilter

  """Filter by the object’s `so` field."""
  so: IntFilter

  """Filter by the object’s `sb` field."""
  sb: IntFilter

  """Filter by the object’s `cs` field."""
  cs: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `xi` field."""
  xi: IntFilter

  """Filter by the object’s `pitcherCt` field."""
  pitcherCt: IntFilter

  """Filter by the object’s `er` field."""
  er: IntFilter

  """Filter by the object’s `ter` field."""
  ter: IntFilter

  """Filter by the object’s `wp` field."""
  wp: IntFilter

  """Filter by the object’s `bk` field."""
  bk: IntFilter

  """Filter by the object’s `po` field."""
  po: IntFilter

  """Filter by the object’s `a` field."""
  a: IntFilter

  """Filter by the object’s `pb` field."""
  pb: IntFilter

  """Filter by the object’s `dp` field."""
  dp: IntFilter

  """Filter by the object’s `tp` field."""
  tp: IntFilter

  """Filter by the object’s `lineup1BatNameTx` field."""
  lineup1BatNameTx: StringFilter

  """Filter by the object’s `lineup2BatNameTx` field."""
  lineup2BatNameTx: StringFilter

  """Filter by the object’s `lineup3BatNameTx` field."""
  lineup3BatNameTx: StringFilter

  """Filter by the object’s `lineup4BatNameTx` field."""
  lineup4BatNameTx: StringFilter

  """Filter by the object’s `lineup5BatNameTx` field."""
  lineup5BatNameTx: StringFilter

  """Filter by the object’s `lineup6BatNameTx` field."""
  lineup6BatNameTx: StringFilter

  """Filter by the object’s `lineup7BatNameTx` field."""
  lineup7BatNameTx: StringFilter

  """Filter by the object’s `lineup8BatNameTx` field."""
  lineup8BatNameTx: StringFilter

  """Filter by the object’s `lineup9BatNameTx` field."""
  lineup9BatNameTx: StringFilter

  """Filter by the object’s `gameStart` field."""
  gameStart: DatetimeFilter

  """Filter by the object’s `year` field."""
  year: IntFilter

  """Checks for all expressions in this list."""
  and: [RetroTeamGameFilter!]

  """Checks for any expressions in this list."""
  or: [RetroTeamGameFilter!]

  """Negates the expression."""
  not: RetroTeamGameFilter
}

"""An input for mutations affecting `RetroTeamGame`"""
input RetroTeamGameInput {
  gameId: String!
  batLast: Boolean
  teamId: String!
  startPitId: String
  opponentTeamId: String
  r: Int
  h: Int
  e: Int
  lob: Int
  lineup1BatId: String
  lineup1FldCd: Int
  lineup2BatId: String
  lineup2FldCd: Int
  lineup3BatId: String
  lineup3FldCd: Int
  lineup4BatId: String
  lineup4FldCd: Int
  lineup5BatId: String
  lineup5FldCd: Int
  lineup6BatId: String
  lineup6FldCd: Int
  lineup7BatId: String
  lineup7FldCd: Int
  lineup8BatId: String
  lineup8FldCd: Int
  lineup9BatId: String
  lineup9FldCd: Int
  finishPitId: String
  teamLeagueId: String
  lineTx: String
  ab: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sh: Int
  sf: Int
  hbp: Int
  bb: Int
  ibb: Int
  so: Int
  sb: Int
  cs: Int
  gidp: Int
  xi: Int
  pitcherCt: Int
  er: Int
  ter: Int
  wp: Int
  bk: Int
  po: Int
  a: Int
  pb: Int
  dp: Int
  tp: Int
  lineup1BatNameTx: String
  lineup2BatNameTx: String
  lineup3BatNameTx: String
  lineup4BatNameTx: String
  lineup5BatNameTx: String
  lineup6BatNameTx: String
  lineup7BatNameTx: String
  lineup8BatNameTx: String
  lineup9BatNameTx: String
  gameStart: Datetime
  year: Int
}

"""
Represents an update to a `RetroTeamGame`. Fields that are set will be updated.
"""
input RetroTeamGamePatch {
  gameId: String
  batLast: Boolean
  teamId: String
  startPitId: String
  opponentTeamId: String
  r: Int
  h: Int
  e: Int
  lob: Int
  lineup1BatId: String
  lineup1FldCd: Int
  lineup2BatId: String
  lineup2FldCd: Int
  lineup3BatId: String
  lineup3FldCd: Int
  lineup4BatId: String
  lineup4FldCd: Int
  lineup5BatId: String
  lineup5FldCd: Int
  lineup6BatId: String
  lineup6FldCd: Int
  lineup7BatId: String
  lineup7FldCd: Int
  lineup8BatId: String
  lineup8FldCd: Int
  lineup9BatId: String
  lineup9FldCd: Int
  finishPitId: String
  teamLeagueId: String
  lineTx: String
  ab: Int
  double: Int
  triple: Int
  hr: Int
  rbi: Int
  sh: Int
  sf: Int
  hbp: Int
  bb: Int
  ibb: Int
  so: Int
  sb: Int
  cs: Int
  gidp: Int
  xi: Int
  pitcherCt: Int
  er: Int
  ter: Int
  wp: Int
  bk: Int
  po: Int
  a: Int
  pb: Int
  dp: Int
  tp: Int
  lineup1BatNameTx: String
  lineup2BatNameTx: String
  lineup3BatNameTx: String
  lineup4BatNameTx: String
  lineup5BatNameTx: String
  lineup6BatNameTx: String
  lineup7BatNameTx: String
  lineup8BatNameTx: String
  lineup9BatNameTx: String
  gameStart: Datetime
  year: Int
}

"""A connection to a list of `RetroTeamGame` values."""
type RetroTeamGamesConnection {
  """A list of `RetroTeamGame` objects."""
  nodes: [RetroTeamGame]!

  """
  A list of edges which contains the `RetroTeamGame` and cursor to aid in pagination.
  """
  edges: [RetroTeamGamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RetroTeamGame` you could get from the connection."""
  totalCount: Int!
}

"""A `RetroTeamGame` edge in the connection."""
type RetroTeamGamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RetroTeamGame` at the end of the edge."""
  node: RetroTeamGame
}

"""Methods to use when ordering `RetroTeamGame`."""
enum RetroTeamGamesOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  BAT_LAST_ASC
  BAT_LAST_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  START_PIT_ID_ASC
  START_PIT_ID_DESC
  OPPONENT_TEAM_ID_ASC
  OPPONENT_TEAM_ID_DESC
  R_ASC
  R_DESC
  H_ASC
  H_DESC
  E_ASC
  E_DESC
  LOB_ASC
  LOB_DESC
  LINEUP1_BAT_ID_ASC
  LINEUP1_BAT_ID_DESC
  LINEUP1_FLD_CD_ASC
  LINEUP1_FLD_CD_DESC
  LINEUP2_BAT_ID_ASC
  LINEUP2_BAT_ID_DESC
  LINEUP2_FLD_CD_ASC
  LINEUP2_FLD_CD_DESC
  LINEUP3_BAT_ID_ASC
  LINEUP3_BAT_ID_DESC
  LINEUP3_FLD_CD_ASC
  LINEUP3_FLD_CD_DESC
  LINEUP4_BAT_ID_ASC
  LINEUP4_BAT_ID_DESC
  LINEUP4_FLD_CD_ASC
  LINEUP4_FLD_CD_DESC
  LINEUP5_BAT_ID_ASC
  LINEUP5_BAT_ID_DESC
  LINEUP5_FLD_CD_ASC
  LINEUP5_FLD_CD_DESC
  LINEUP6_BAT_ID_ASC
  LINEUP6_BAT_ID_DESC
  LINEUP6_FLD_CD_ASC
  LINEUP6_FLD_CD_DESC
  LINEUP7_BAT_ID_ASC
  LINEUP7_BAT_ID_DESC
  LINEUP7_FLD_CD_ASC
  LINEUP7_FLD_CD_DESC
  LINEUP8_BAT_ID_ASC
  LINEUP8_BAT_ID_DESC
  LINEUP8_FLD_CD_ASC
  LINEUP8_FLD_CD_DESC
  LINEUP9_BAT_ID_ASC
  LINEUP9_BAT_ID_DESC
  LINEUP9_FLD_CD_ASC
  LINEUP9_FLD_CD_DESC
  FINISH_PIT_ID_ASC
  FINISH_PIT_ID_DESC
  TEAM_LEAGUE_ID_ASC
  TEAM_LEAGUE_ID_DESC
  LINE_TX_ASC
  LINE_TX_DESC
  AB_ASC
  AB_DESC
  DOUBLE_ASC
  DOUBLE_DESC
  TRIPLE_ASC
  TRIPLE_DESC
  HR_ASC
  HR_DESC
  RBI_ASC
  RBI_DESC
  SH_ASC
  SH_DESC
  SF_ASC
  SF_DESC
  HBP_ASC
  HBP_DESC
  BB_ASC
  BB_DESC
  IBB_ASC
  IBB_DESC
  SO_ASC
  SO_DESC
  SB_ASC
  SB_DESC
  CS_ASC
  CS_DESC
  GIDP_ASC
  GIDP_DESC
  XI_ASC
  XI_DESC
  PITCHER_CT_ASC
  PITCHER_CT_DESC
  ER_ASC
  ER_DESC
  TER_ASC
  TER_DESC
  WP_ASC
  WP_DESC
  BK_ASC
  BK_DESC
  PO_ASC
  PO_DESC
  A_ASC
  A_DESC
  PB_ASC
  PB_DESC
  DP_ASC
  DP_DESC
  TP_ASC
  TP_DESC
  LINEUP1_BAT_NAME_TX_ASC
  LINEUP1_BAT_NAME_TX_DESC
  LINEUP2_BAT_NAME_TX_ASC
  LINEUP2_BAT_NAME_TX_DESC
  LINEUP3_BAT_NAME_TX_ASC
  LINEUP3_BAT_NAME_TX_DESC
  LINEUP4_BAT_NAME_TX_ASC
  LINEUP4_BAT_NAME_TX_DESC
  LINEUP5_BAT_NAME_TX_ASC
  LINEUP5_BAT_NAME_TX_DESC
  LINEUP6_BAT_NAME_TX_ASC
  LINEUP6_BAT_NAME_TX_DESC
  LINEUP7_BAT_NAME_TX_ASC
  LINEUP7_BAT_NAME_TX_DESC
  LINEUP8_BAT_NAME_TX_ASC
  LINEUP8_BAT_NAME_TX_DESC
  LINEUP9_BAT_NAME_TX_ASC
  LINEUP9_BAT_NAME_TX_DESC
  GAME_START_ASC
  GAME_START_DESC
  YEAR_ASC
  YEAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
All input for the `updateLahmanBattingByPlayerIdAndYearAndStint` mutation.
"""
input UpdateLahmanBattingByPlayerIdAndYearAndStintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanBatting` being updated.
  """
  lahmanBattingPatch: LahmanBattingPatch!
  playerId: String!
  year: Int!
  stint: Int!
}

"""All input for the `updateLahmanBatting` mutation."""
input UpdateLahmanBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanBatting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanBatting` being updated.
  """
  lahmanBattingPatch: LahmanBattingPatch!
}

"""The output of our update `LahmanBatting` mutation."""
type UpdateLahmanBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBatting` that was updated by this mutation."""
  lahmanBatting: LahmanBatting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanBatting`. May be used by Relay 1."""
  lahmanBattingEdge(
    """The method to use when ordering `LahmanBatting`."""
    orderBy: [LahmanBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingsEdge
}

"""
All input for the `updateLahmanBattingpostByPlayerIdAndYearAndRound` mutation.
"""
input UpdateLahmanBattingpostByPlayerIdAndYearAndRoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanBattingpost` being updated.
  """
  lahmanBattingpostPatch: LahmanBattingpostPatch!
  playerId: String!
  year: Int!
  round: String!
}

"""All input for the `updateLahmanBattingpost` mutation."""
input UpdateLahmanBattingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanBattingpost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanBattingpost` being updated.
  """
  lahmanBattingpostPatch: LahmanBattingpostPatch!
}

"""The output of our update `LahmanBattingpost` mutation."""
type UpdateLahmanBattingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanBattingpost` that was updated by this mutation."""
  lahmanBattingpost: LahmanBattingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanBattingpost`. May be used by Relay 1."""
  lahmanBattingpostEdge(
    """The method to use when ordering `LahmanBattingpost`."""
    orderBy: [LahmanBattingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanBattingpostsEdge
}

"""
All input for the `updateLahmanFieldingByPlayerIdAndYearAndStintAndPos` mutation.
"""
input UpdateLahmanFieldingByPlayerIdAndYearAndStintAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanFielding` being updated.
  """
  lahmanFieldingPatch: LahmanFieldingPatch!
  playerId: String!
  year: Int!
  stint: Int!
  pos: String!
}

"""All input for the `updateLahmanFielding` mutation."""
input UpdateLahmanFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanFielding` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanFielding` being updated.
  """
  lahmanFieldingPatch: LahmanFieldingPatch!
}

"""The output of our update `LahmanFielding` mutation."""
type UpdateLahmanFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFielding` that was updated by this mutation."""
  lahmanFielding: LahmanFielding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFielding`. May be used by Relay 1."""
  lahmanFieldingEdge(
    """The method to use when ordering `LahmanFielding`."""
    orderBy: [LahmanFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingsEdge
}

"""
All input for the `updateLahmanFieldingpostByPlayerIdAndYearAndRoundAndPos` mutation.
"""
input UpdateLahmanFieldingpostByPlayerIdAndYearAndRoundAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanFieldingpost` being updated.
  """
  lahmanFieldingpostPatch: LahmanFieldingpostPatch!
  playerId: String!
  year: Int!
  round: String!
  pos: String!
}

"""All input for the `updateLahmanFieldingpost` mutation."""
input UpdateLahmanFieldingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanFieldingpost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanFieldingpost` being updated.
  """
  lahmanFieldingpostPatch: LahmanFieldingpostPatch!
}

"""The output of our update `LahmanFieldingpost` mutation."""
type UpdateLahmanFieldingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanFieldingpost` that was updated by this mutation."""
  lahmanFieldingpost: LahmanFieldingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanFieldingpost`. May be used by Relay 1."""
  lahmanFieldingpostEdge(
    """The method to use when ordering `LahmanFieldingpost`."""
    orderBy: [LahmanFieldingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanFieldingpostsEdge
}

"""All input for the `updateLahmanParkByParkKey` mutation."""
input UpdateLahmanParkByParkKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanPark` being updated.
  """
  lahmanParkPatch: LahmanParkPatch!
  parkKey: String!
}

"""All input for the `updateLahmanPark` mutation."""
input UpdateLahmanParkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPark` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanPark` being updated.
  """
  lahmanParkPatch: LahmanParkPatch!
}

"""The output of our update `LahmanPark` mutation."""
type UpdateLahmanParkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPark` that was updated by this mutation."""
  lahmanPark: LahmanPark

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPark`. May be used by Relay 1."""
  lahmanParkEdge(
    """The method to use when ordering `LahmanPark`."""
    orderBy: [LahmanParksOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanParksEdge
}

"""All input for the `updateLahmanPersonByPlayerId` mutation."""
input UpdateLahmanPersonByPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanPerson` being updated.
  """
  lahmanPersonPatch: LahmanPersonPatch!
  playerId: String!
}

"""All input for the `updateLahmanPersonByRetroId` mutation."""
input UpdateLahmanPersonByRetroIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanPerson` being updated.
  """
  lahmanPersonPatch: LahmanPersonPatch!
  retroId: String!
}

"""All input for the `updateLahmanPerson` mutation."""
input UpdateLahmanPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPerson` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanPerson` being updated.
  """
  lahmanPersonPatch: LahmanPersonPatch!
}

"""The output of our update `LahmanPerson` mutation."""
type UpdateLahmanPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPerson` that was updated by this mutation."""
  lahmanPerson: LahmanPerson

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanPerson`. May be used by Relay 1."""
  lahmanPersonEdge(
    """The method to use when ordering `LahmanPerson`."""
    orderBy: [LahmanPeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPeopleEdge
}

"""
All input for the `updateLahmanPitchingByPlayerIdAndYearAndStint` mutation.
"""
input UpdateLahmanPitchingByPlayerIdAndYearAndStintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanPitching` being updated.
  """
  lahmanPitchingPatch: LahmanPitchingPatch!
  playerId: String!
  year: Int!
  stint: Int!
}

"""All input for the `updateLahmanPitching` mutation."""
input UpdateLahmanPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPitching` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanPitching` being updated.
  """
  lahmanPitchingPatch: LahmanPitchingPatch!
}

"""The output of our update `LahmanPitching` mutation."""
type UpdateLahmanPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitching` that was updated by this mutation."""
  lahmanPitching: LahmanPitching

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitching`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitching`. May be used by Relay 1."""
  lahmanPitchingEdge(
    """The method to use when ordering `LahmanPitching`."""
    orderBy: [LahmanPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingsEdge
}

"""
All input for the `updateLahmanPitchingpostByPlayerIdAndYearAndRound` mutation.
"""
input UpdateLahmanPitchingpostByPlayerIdAndYearAndRoundInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanPitchingpost` being updated.
  """
  lahmanPitchingpostPatch: LahmanPitchingpostPatch!
  playerId: String!
  year: Int!
  round: String!
}

"""All input for the `updateLahmanPitchingpost` mutation."""
input UpdateLahmanPitchingpostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanPitchingpost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanPitchingpost` being updated.
  """
  lahmanPitchingpostPatch: LahmanPitchingpostPatch!
}

"""The output of our update `LahmanPitchingpost` mutation."""
type UpdateLahmanPitchingpostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanPitchingpost` that was updated by this mutation."""
  lahmanPitchingpost: LahmanPitchingpost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LahmanPerson` that is related to this `LahmanPitchingpost`.
  """
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanPitchingpost`. May be used by Relay 1."""
  lahmanPitchingpostEdge(
    """The method to use when ordering `LahmanPitchingpost`."""
    orderBy: [LahmanPitchingpostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanPitchingpostsEdge
}

"""
All input for the `updateLahmanSalaryByPlayerIdAndYearAndTeamId` mutation.
"""
input UpdateLahmanSalaryByPlayerIdAndYearAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanSalary` being updated.
  """
  lahmanSalaryPatch: LahmanSalaryPatch!
  playerId: String!
  year: Int!
  teamId: String!
}

"""All input for the `updateLahmanSalary` mutation."""
input UpdateLahmanSalaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanSalary` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanSalary` being updated.
  """
  lahmanSalaryPatch: LahmanSalaryPatch!
}

"""The output of our update `LahmanSalary` mutation."""
type UpdateLahmanSalaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanSalary` that was updated by this mutation."""
  lahmanSalary: LahmanSalary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `LahmanSalary`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `LahmanSalary`. May be used by Relay 1."""
  lahmanSalaryEdge(
    """The method to use when ordering `LahmanSalary`."""
    orderBy: [LahmanSalariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanSalariesEdge
}

"""All input for the `updateLahmanTeamByTeamIdAndYear` mutation."""
input UpdateLahmanTeamByTeamIdAndYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanTeam` being updated.
  """
  lahmanTeamPatch: LahmanTeamPatch!
  teamId: String!
  year: Int!
}

"""All input for the `updateLahmanTeamByTeamIdRetroAndYear` mutation."""
input UpdateLahmanTeamByTeamIdRetroAndYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LahmanTeam` being updated.
  """
  lahmanTeamPatch: LahmanTeamPatch!
  teamIdRetro: String!
  year: Int!
}

"""All input for the `updateLahmanTeam` mutation."""
input UpdateLahmanTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LahmanTeam` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LahmanTeam` being updated.
  """
  lahmanTeamPatch: LahmanTeamPatch!
}

"""The output of our update `LahmanTeam` mutation."""
type UpdateLahmanTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LahmanTeam` that was updated by this mutation."""
  lahmanTeam: LahmanTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LahmanTeam`. May be used by Relay 1."""
  lahmanTeamEdge(
    """The method to use when ordering `LahmanTeam`."""
    orderBy: [LahmanTeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LahmanTeamsEdge
}

"""All input for the `updateRetroBattingByPlayerIdAndGameId` mutation."""
input UpdateRetroBattingByPlayerIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroBatting` being updated.
  """
  retroBattingPatch: RetroBattingPatch!
  playerId: String!
  gameId: String!
}

"""All input for the `updateRetroBatting` mutation."""
input UpdateRetroBattingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroBatting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroBatting` being updated.
  """
  retroBattingPatch: RetroBattingPatch!
}

"""The output of our update `RetroBatting` mutation."""
type UpdateRetroBattingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroBatting` that was updated by this mutation."""
  retroBatting: RetroBatting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroBatting`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroBatting`. May be used by Relay 1."""
  retroBattingEdge(
    """The method to use when ordering `RetroBatting`."""
    orderBy: [RetroBattingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroBattingsEdge
}

"""All input for the `updateRetroEventByGameIdAndEventId` mutation."""
input UpdateRetroEventByGameIdAndEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroEvent` being updated.
  """
  retroEventPatch: RetroEventPatch!
  gameId: String!
  eventId: Int!
}

"""All input for the `updateRetroEvent` mutation."""
input UpdateRetroEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroEvent` being updated.
  """
  retroEventPatch: RetroEventPatch!
}

"""The output of our update `RetroEvent` mutation."""
type UpdateRetroEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroEvent` that was updated by this mutation."""
  retroEvent: RetroEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RetroGame` that is related to this `RetroEvent`."""
  retroGameByGameId: RetroGame

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByBatId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroEvent`."""
  lahmanPersonByPitId: LahmanPerson

  """An edge for our `RetroEvent`. May be used by Relay 1."""
  retroEventEdge(
    """The method to use when ordering `RetroEvent`."""
    orderBy: [RetroEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroEventsEdge
}

"""
All input for the `updateRetroFieldingByPlayerIdAndGameIdAndPos` mutation.
"""
input UpdateRetroFieldingByPlayerIdAndGameIdAndPosInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroFielding` being updated.
  """
  retroFieldingPatch: RetroFieldingPatch!
  playerId: String!
  gameId: String!
  pos: String!
}

"""All input for the `updateRetroFielding` mutation."""
input UpdateRetroFieldingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroFielding` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroFielding` being updated.
  """
  retroFieldingPatch: RetroFieldingPatch!
}

"""The output of our update `RetroFielding` mutation."""
type UpdateRetroFieldingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroFielding` that was updated by this mutation."""
  retroFielding: RetroFielding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroFielding`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroFielding`. May be used by Relay 1."""
  retroFieldingEdge(
    """The method to use when ordering `RetroFielding`."""
    orderBy: [RetroFieldingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroFieldingsEdge
}

"""All input for the `updateRetroGameByGameId` mutation."""
input UpdateRetroGameByGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroGame` being updated.
  """
  retroGamePatch: RetroGamePatch!
  gameId: String!
}

"""All input for the `updateRetroGame` mutation."""
input UpdateRetroGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroGame` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroGame` being updated.
  """
  retroGamePatch: RetroGamePatch!
}

"""The output of our update `RetroGame` mutation."""
type UpdateRetroGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroGame` that was updated by this mutation."""
  retroGame: RetroGame

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByWinPitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByLosePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonBySavePitId: LahmanPerson

  """Reads a single `LahmanPerson` that is related to this `RetroGame`."""
  lahmanPersonByGwrbiBatId: LahmanPerson

  """An edge for our `RetroGame`. May be used by Relay 1."""
  retroGameEdge(
    """The method to use when ordering `RetroGame`."""
    orderBy: [RetroGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroGamesEdge
}

"""All input for the `updateRetroPitchingByPlayerIdAndGameId` mutation."""
input UpdateRetroPitchingByPlayerIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroPitching` being updated.
  """
  retroPitchingPatch: RetroPitchingPatch!
  playerId: String!
  gameId: String!
}

"""All input for the `updateRetroPitching` mutation."""
input UpdateRetroPitchingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroPitching` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroPitching` being updated.
  """
  retroPitchingPatch: RetroPitchingPatch!
}

"""The output of our update `RetroPitching` mutation."""
type UpdateRetroPitchingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroPitching` that was updated by this mutation."""
  retroPitching: RetroPitching

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanPerson` that is related to this `RetroPitching`."""
  lahmanPersonByPlayerId: LahmanPerson

  """An edge for our `RetroPitching`. May be used by Relay 1."""
  retroPitchingEdge(
    """The method to use when ordering `RetroPitching`."""
    orderBy: [RetroPitchingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroPitchingsEdge
}

"""All input for the `updateRetroTeamGameByTeamIdAndGameId` mutation."""
input UpdateRetroTeamGameByTeamIdAndGameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RetroTeamGame` being updated.
  """
  retroTeamGamePatch: RetroTeamGamePatch!
  teamId: String!
  gameId: String!
}

"""All input for the `updateRetroTeamGame` mutation."""
input UpdateRetroTeamGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RetroTeamGame` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RetroTeamGame` being updated.
  """
  retroTeamGamePatch: RetroTeamGamePatch!
}

"""The output of our update `RetroTeamGame` mutation."""
type UpdateRetroTeamGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RetroTeamGame` that was updated by this mutation."""
  retroTeamGame: RetroTeamGame

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `LahmanTeam` that is related to this `RetroTeamGame`."""
  lahmanTeamByTeamIdAndYear: LahmanTeam

  """An edge for our `RetroTeamGame`. May be used by Relay 1."""
  retroTeamGameEdge(
    """The method to use when ordering `RetroTeamGame`."""
    orderBy: [RetroTeamGamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RetroTeamGamesEdge
}

